webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
  Modified by Evan You @yyx990803
*/

var hasDocument = typeof document !== 'undefined'

if (typeof DEBUG !== 'undefined' && DEBUG) {
  if (!hasDocument) {
    throw new Error(
    'vue-style-loader cannot be used in a non-browser environment. ' +
    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
  ) }
}

var listToStyles = __webpack_require__(75)

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

var stylesInDom = {/*
  [id: number]: {
    id: number,
    refs: number,
    parts: Array<(obj?: StyleObjectPart) => void>
  }
*/}

var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
var singletonElement = null
var singletonCounter = 0
var isProduction = false
var noop = function () {}

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

module.exports = function (parentId, list, _isProduction) {
  isProduction = _isProduction

  var styles = listToStyles(parentId, list)
  addStylesToDom(styles)

  return function update (newList) {
    var mayRemove = []
    for (var i = 0; i < styles.length; i++) {
      var item = styles[i]
      var domStyle = stylesInDom[item.id]
      domStyle.refs--
      mayRemove.push(domStyle)
    }
    if (newList) {
      styles = listToStyles(parentId, newList)
      addStylesToDom(styles)
    } else {
      styles = []
    }
    for (var i = 0; i < mayRemove.length; i++) {
      var domStyle = mayRemove[i]
      if (domStyle.refs === 0) {
        for (var j = 0; j < domStyle.parts.length; j++) {
          domStyle.parts[j]()
        }
        delete stylesInDom[domStyle.id]
      }
    }
  }
}

function addStylesToDom (styles /* Array<StyleObject> */) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var domStyle = stylesInDom[item.id]
    if (domStyle) {
      domStyle.refs++
      for (var j = 0; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j])
      }
      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j]))
      }
      if (domStyle.parts.length > item.parts.length) {
        domStyle.parts.length = item.parts.length
      }
    } else {
      var parts = []
      for (var j = 0; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j]))
      }
      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
    }
  }
}

function createStyleElement () {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  head.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */) {
  var update, remove
  var styleElement = document.querySelector('style[data-vue-ssr-id~="' + obj.id + '"]')

  if (styleElement) {
    if (isProduction) {
      // has SSR styles and in production mode.
      // simply do nothing.
      return noop
    } else {
      // has SSR styles but in dev mode.
      // for some reason Chrome can't handle source map in server-rendered
      // style tags - source maps in <style> only works if the style tag is
      // created and inserted dynamically. So we remove the server rendered
      // styles and inject new ones.
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  if (isOldIE) {
    // use singleton mode for IE9.
    var styleIndex = singletonCounter++
    styleElement = singletonElement || (singletonElement = createStyleElement())
    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
  } else {
    // use multi-style-tag mode in all other cases
    styleElement = createStyleElement()
    update = applyToTag.bind(null, styleElement)
    remove = function () {
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  update(obj)

  return function updateStyle (newObj /* StyleObjectPart */) {
    if (newObj) {
      if (newObj.css === obj.css &&
          newObj.media === obj.media &&
          newObj.sourceMap === obj.sourceMap) {
        return
      }
      update(obj = newObj)
    } else {
      remove()
    }
  }
}

var replaceText = (function () {
  var textStore = []

  return function (index, replacement) {
    textStore[index] = replacement
    return textStore.filter(Boolean).join('\n')
  }
})()

function applyToSingletonTag (styleElement, index, remove, obj) {
  var css = remove ? '' : obj.css

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = replaceText(index, css)
  } else {
    var cssNode = document.createTextNode(css)
    var childNodes = styleElement.childNodes
    if (childNodes[index]) styleElement.removeChild(childNodes[index])
    if (childNodes.length) {
      styleElement.insertBefore(cssNode, childNodes[index])
    } else {
      styleElement.appendChild(cssNode)
    }
  }
}

function applyToTag (styleElement, obj) {
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  scopeId,
  cssModules
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  // inject cssModules
  if (cssModules) {
    var computed = options.computed || (options.computed = {})
    Object.keys(cssModules).forEach(function (key) {
      var module = cssModules[key]
      computed[key] = function () { return module }
    })
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _vue = __webpack_require__(1);

var _vue2 = _interopRequireDefault(_vue);

var _routers = __webpack_require__(71);

var _routers2 = _interopRequireDefault(_routers);

var _elementUi = __webpack_require__(47);

var _elementUi2 = _interopRequireDefault(_elementUi);

__webpack_require__(68);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.use(_elementUi2.default);

_vue2.default.prototype.Const = {
    userMsg: function () {
        if ($.cookie('userMsg')) {
            return JSON.parse($.cookie('userMsg'));
        } else {
            window.location.href = API_ENV.API_ProjectRoot + 'index/index/login';
        }
    }()
};

var appCourse = new _vue2.default({
    el: '#library',
    data: {
        userMsg: '',
        userPrivilege: '',
        Bus: new _vue2.default()
    },
    methods: {
        checked: function checked(Privilege) {
            return this.userPrivilege.indexOf(Privilege) < 0 ? false : true;
        }
    },
    router: _routers2.default,
    mounted: function mounted() {
        this.$nextTick(function () {
            /*if (window.localStorage.getItem('userMsg') && window.localStorage.getItem('userPrivilege')) {
                this.userMsg = JSON.parse( window.localStorage.getItem('userMsg') );
                this.userPrivilege = window.localStorage.getItem('userPrivilege').split(',');
            } else {
                window.location.href = `${API_ENV.API_ProjectRoot}index/index/login`;
            }*/
            if ($.cookie('userMsg') && JSON.parse($.cookie('userMsg')) !== null && window.localStorage.getItem('userPrivilege')) {
                this.userMsg = JSON.parse($.cookie('userMsg'));
                this.userPrivilege = window.localStorage.getItem('userPrivilege').split(',');

                // 更新cookie时间
                var date = new Date();
                date.setTime(date.getTime() + 1 * 1 * 60 * 30 * 1000);
                $.cookie('userMsg', $.cookie('userMsg'), { expires: date, path: '/' });
            } else {
                window.location.href = API_ENV.API_ProjectRoot + 'index/index/login';
            }
        });
    }

});

/***/ }),
/* 70 */,
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vue = __webpack_require__(1);

var _vue2 = _interopRequireDefault(_vue);

var _vueRouter = __webpack_require__(46);

var _vueRouter2 = _interopRequireDefault(_vueRouter);

var _libcourse = __webpack_require__(72);

var _libcourse2 = _interopRequireDefault(_libcourse);

var _libcourselist = __webpack_require__(78);

var _libcourselist2 = _interopRequireDefault(_libcourselist);

var _libchapter = __webpack_require__(83);

var _libchapter2 = _interopRequireDefault(_libchapter);

var _libAddCourse = __webpack_require__(88);

var _libAddCourse2 = _interopRequireDefault(_libAddCourse);

var _libEditChapter = __webpack_require__(93);

var _libEditChapter2 = _interopRequireDefault(_libEditChapter);

var _uploadfile = __webpack_require__(98);

var _uploadfile2 = _interopRequireDefault(_uploadfile);

var _tasklist = __webpack_require__(108);

var _tasklist2 = _interopRequireDefault(_tasklist);

var _libtask = __webpack_require__(113);

var _libtask2 = _interopRequireDefault(_libtask);

var _libreadtask = __webpack_require__(118);

var _libreadtask2 = _interopRequireDefault(_libreadtask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.use(_vueRouter2.default);
// import libeditcourse from '../components/libEditCourse.vue';
exports.default = new _vueRouter2.default({
    routes: [{
        path: '/', component: _libcourse2.default,
        children: [{ path: '', component: _libcourselist2.default }, { path: 'courselib/libchapter', component: _libchapter2.default }, { path: 'courselib/coursem/:cat', component: _libAddCourse2.default },
        // { path: 'courselib/libeditcourse', component: libeditcourse },
        { path: 'courselib/libeditchapter', component: _libEditChapter2.default }, { path: 'courselib/libaddfile', component: _uploadfile2.default }, { path: 'courselib/libtasklist', component: _tasklist2.default }, { path: 'courselib/libtaskcon', component: _libtask2.default }, { path: 'courselib/libreadtask', component: _libreadtask2.default }]
    }]
});

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(73)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(76),
  /* template */
  __webpack_require__(77),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libcourse.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libcourse.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7a66acbb", Component.options)
  } else {
    hotAPI.reload("data-v-7a66acbb", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(74);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("6d628f3f", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-7a66acbb!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libcourse.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-7a66acbb!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libcourse.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);

// exports


/***/ }),
/* 75 */
/***/ (function(module, exports) {

/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
module.exports = function listToStyles (parentId, list) {
  var styles = []
  var newStyles = {}
  for (var i = 0; i < list.length; i++) {
    var item = list[i]
    var id = item[0]
    var css = item[1]
    var media = item[2]
    var sourceMap = item[3]
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    }
    if (!newStyles[id]) {
      styles.push(newStyles[id] = { id: id, parts: [part] })
    } else {
      newStyles[id].parts.push(part)
    }
  }
  return styles
}


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
//
//
//
//

exports.default = {
    data: function data() {
        return {
            courseid: ''
        };
    },
    mounted: function mounted() {},
    methods: {}
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('router-view')
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7a66acbb", module.exports)
  }
}

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(79)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(81),
  /* template */
  __webpack_require__(82),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libcourselist.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libcourselist.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6057d64e", Component.options)
  } else {
    hotAPI.reload("data-v-6057d64e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(80);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("140b344e", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-6057d64e!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libcourselist.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-6057d64e!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libcourselist.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n#searchbyjigou {\r\n  padding: 0 20px;\n}\n#searchbyjigou .layui-input-block {\r\n  margin: 5px auto;\n}\r\n", ""]);

// exports


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
  data: function data() {
    var thisVue = this;
    return {
      courseAll: [], // 所有课程
      currrentCourses: [], // 当前课程
      errorMsg: "",
      categories: [],
      org: {
        organization: [],
        props: {
          value: 'id',
          label: 'name',
          children: 'children'
        },
        selOrg: function () {
          var arr = [];
          arr.push(thisVue.Const.userMsg.pid);
          return arr;
        }()
      },
      page: 1, // 当前页码，默认第一页
      totalpage: 0, // 总条数
      rows: 5,
      currentOrg: "" // 当前机构的id 用于翻页的请求
    };
  },
  created: function created() {},
  activated: function activated() {
    // this.onSelsetJigou();
    console.log("触发 libcourselist activated");
  },
  mounted: function mounted() {
    this.startRequestCourse();
  },
  methods: {
    goToQuesBank: function goToQuesBank(id) {
      var url = API_ENV.API_STATIC + "public/edumodel/questionbank/?d=" + id;
      window.open(url);
    },
    goToPaperBank: function goToPaperBank(id) {
      var url = API_ENV.API_STATIC + "public/edumodel/paperbank/?d=" + id;
      window.open(url);
    },

    // 页码显示条数改变
    handleSizeChange: function handleSizeChange(val) {
      this.rows = val;
      this.requestCourse();
    },
    // 当前页码改变
    handleCurrentChange: function handleCurrentChange(val) {
      this.page = val;
      this.requestCourse();
    },
    // 机构选择改变
    fnSelOrgChange: function fnSelOrgChange(param) {
      // console.log('param', param);
      this.requestCourse();
    },
    startRequestCourse: function startRequestCourse() {
      // 首页第一次请求课程数据
      var thisVue = this;
      // 请求课程库数据
      var data = {
        module: "service",
        controller: "Data_Request",
        action: "courseRequest",
        page: this.page,
        rows: this.rows // 没有行数保持空值，默认返回15条数据
        // organization: this.org.selOrg.concat([]).pop()
      };
      $.ajax({
        url: API_ENV.API_URL,
        type: "POST",
        data: data,
        success: function success(data) {
          var data = JSON.parse(data);
          window.utiltool.checkLoginStatus(data.status);
          if (data.status === 0 && !data.data.data) {
            thisVue.courseAll = data.data.course;
            thisVue.currrentCourses = data.data.course;
            thisVue.categories = data.data.categories;
            thisVue.org.organization = function () {
              var arr = [];
              arr.push(data.data.organization);
              return arr;
            }();
            thisVue.totalpage = Number(data.data.page.total);
            thisVue.page = Number(data.data.page.current_page);
            // DOM更新完之后注册操作函数
            thisVue.$nextTick(function () {
              rollList();
              mainTitleCut();
              thisVue.computerUl();
            });
          } else {
            thisVue.errorMsg = data.data.course ? data.data.course.toString() : '该机构下暂无课程';
            thisVue.$message({
              type: "danger",
              message: thisVue.errorMsg
            });
          }
        },
        error: function error(err) {
          // console.log('课程库请求失败！', err);
          thisVue.$message({
            type: "warning",
            message: "课程库请求失败！"
          });
        }
      });
    },
    courseCategories: function courseCategories(categories) {
      this.$root.Bus.$emit("sendCategories", categories);
    },
    getTypeCourse: function getTypeCourse(type) {
      /* 按课程类型分类课程 */
      var currentC = [];
      if (type === "all") {
        this.currrentCourses = this.courseAll;
      } else {
        for (var i = 0; i < this.courseAll.length; i++) {
          if (type === this.courseAll[i].category) {
            currentC.push(this.courseAll[i]);
          }
        }
        this.currrentCourses = currentC;
      }
    },
    /* 翻页请求课程数据 (页码, 每页行数 || '', 机构 || '') */
    requestCourse: function requestCourse() {
      var thisVue = this;
      var data = {
        module: "service",
        controller: "Course_Con",
        action: "queCoursePage",
        page: this.page,
        rows: this.rows, // 没有行数保持空值，默认返回15条数据
        organization: this.org.selOrg.concat([]).pop()
      };
      $.ajax({
        url: API_ENV.API_URL,
        type: "POST",
        data: data,
        dataType: "json",
        success: function success(response) {
          window.utiltool.checkLoginStatus(data.status);
          if (response.status === 0 && _typeof(response.data.data.data) === "object") {
            thisVue.courseAll = response.data.data.data;
            thisVue.currrentCourses = response.data.data.data;
            thisVue.totalpage = Number(response.data.data.page.total);
            thisVue.page = Number(response.data.data.page.current_page);
          } else {
            thisVue.$message({
              type: "info",
              message: '该机构下暂无课程！'
            });
          }
        },
        error: function error(err) {
          console.log("page error", err);
          thisVue.$message({
            type: "warning",
            message: "本地请求报错了！"
          });
        }
      });
    },
    computerUl: function computerUl() {
      /* 计算 #library .classify .course-type ul 的宽度*/
      var ul = $("#library .classify .course-type ul");
      var ulli = ul.find("li");
      var w = 0;
      for (var i = 0; i < ulli.length; i++) {
        w += ulli.eq(i).width();
      }
      w += ulli.length * 30;
      ul.css("width", w + "px");

      // 课程类型左右滑动
      $(function () {
        var btn = $("#library .classify .course-type .btn span");
        var ul = $("#library .classify .course-type ul");
        var wrap = $("#library .classify .course-type .wrap").width();
        var left = ul.position().left;
        if (ul.width() >= "550") {
          btn.click(function () {
            var index = $(this).index();
            if (index) {
              // 右边
              left -= 130;
              if (-left + wrap >= ul.width()) {
                left = -(ul.width() - wrap);
              }
            } else {
              // 左边
              left += 130;
              if (left >= 0) {
                left = 0;
              }
            }
            ul.stop().animate({ left: left + "px" }, 500);
          });
        } else {
          btn.parent().hide();
        }
      });
    },
    delCourse: function delCourse(courseid) {
      var _this = this;

      /* 删除课程 */
      var thisVue = this;
      this.$confirm("此操作将删除该课程, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(function () {
        var data = {
          module: "service",
          controller: "Course_Con",
          action: "delCourse",
          id: courseid
        };
        $.ajax({
          url: API_ENV.API_URL,
          data: data,
          type: "POST",
          dataType: "json",
          success: function success(response) {
            window.utiltool.checkLoginStatus(response.status);
            if (!response.status && !window.utiltool.isArray(response.data)) {
              thisVue.$message({
                type: "success",
                message: "删除课程成功！"
              });
              thisVue.page = 1;
              thisVue.requestCourse();
            }
          },
          error: function error(err) {
            thisVue.$message({
              type: "warning",
              message: "删除课程提交失败！"
            });
          }
        });
      }).catch(function () {
        _this.$message({
          type: "info",
          message: "已取消删除"
        });
      });
    },
    addFile: function addFile(course) {
      /* 添加附件 */
      var data = {
        course: course.id,
        course_sections: "",
        flag: 0, // 标识  0:课程|1:章节
        crumbsMsg: "课程库 <span> &gt; </span> 课程(" + course.fullname + ")"
      };
      window.sessionStorage.setItem("addFileData", JSON.stringify(data));
      this.$root.Bus.$emit("sendMsgToFile", data);
    }
  },
  watch: {
    currrentCourses: function currrentCourses() {
      var ThisVue = this;
      ThisVue.$nextTick(function () {
        rollList();
      });
    }
  },
  filters: {
    courseType: function courseType(typenum, categories) {
      for (var i = 0; i < categories.length; i++) {
        if (categories[i].id === typenum) {
          return categories[i].name;
          break;
        }
      }
    }
  }
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "course-lib"
  }, [_c('div', {
    staticClass: "classify clearfix"
  }, [_c('div', {
    staticClass: "fl course-type"
  }, [_c('div', {
    staticClass: "wrap"
  }, [_c('ul', {
    staticClass: "clearfix"
  }, [_c('li', {
    on: {
      "click": function($event) {
        _vm.getTypeCourse('all')
      }
    }
  }, [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("所有课程")])]), _vm._v(" "), _vm._l((_vm.categories), function(item) {
    return _c('li', {
      on: {
        "click": function($event) {
          _vm.getTypeCourse(item.id)
        }
      }
    }, [_c('a', {
      attrs: {
        "href": "javascript:void(0);"
      }
    }, [_vm._v(_vm._s(item.name))])])
  })], 2)]), _vm._v(" "), _vm._m(0)]), _vm._v(" "), _c('div', {
    staticClass: "fr jigou"
  }, [_c('el-cascader', {
    attrs: {
      "change-on-select": true,
      "props": _vm.org.props,
      "options": _vm.org.organization
    },
    on: {
      "change": _vm.fnSelOrgChange
    },
    model: {
      value: (_vm.org.selOrg),
      callback: function($$v) {
        _vm.org.selOrg = $$v
      },
      expression: "org.selOrg"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "courselib-list clearfix"
  }, [(_vm.courseAll.length) ? [_c('ul', _vm._l((_vm.currrentCourses), function(item) {
    return _c('li', {
      staticClass: "clearfix"
    }, [_c('div', {
      staticClass: "msg"
    }, [_c('h2', [_c('router-link', {
      attrs: {
        "to": {
          path: '/courselib/libchapter',
          query: {
            d: item.id
          }
        }
      }
    }, [_vm._v(_vm._s(item.fullname) + "(" + _vm._s(item.shortname) + ")\n                "), _c('span', [_vm._v(_vm._s(item.idnumber))])])], 1), _vm._v(" "), _c('div', {
      staticClass: "wrap-port"
    }, [_c('div', {
      staticClass: "detailes clearfix"
    }, [_c('div', {
      staticClass: "option"
    }, [_c('span', {
      staticClass: "addFile",
      on: {
        "click": function($event) {
          _vm.addFile(item)
        }
      }
    }, [_c('router-link', {
      attrs: {
        "target": "_blank",
        "to": {
          path: '/courselib/libaddfile',
          query: {
            d: item.id
          }
        }
      }
    }, [_vm._v("添加附件")])], 1), _vm._v(" "), _c('span', [_c('router-link', {
      attrs: {
        "to": {
          path: '/courselib/coursem/edit',
          query: {
            ed: item.id
          }
        }
      }
    }, [_vm._v("编辑")])], 1), _vm._v(" "), _c('span', {
      on: {
        "click": function($event) {
          _vm.delCourse(item.id)
        }
      }
    }, [_c('a', {
      attrs: {
        "href": "javascript:void(0);"
      }
    }, [_vm._v("删除")])]), _vm._v(" "), _c('span', [_c('router-link', {
      attrs: {
        "to": {
          path: 'courselib/libtasklist',
          query: {
            td: item.id
          }
        }
      }
    }, [_vm._v("作业管理")])], 1), _vm._v(" "), _c('span', [_c('a', {
      attrs: {
        "href": "javascript:void(0);",
        "title": "题库"
      },
      on: {
        "click": function($event) {
          _vm.goToQuesBank(item.id)
        }
      }
    }, [_vm._v("题库")])]), _vm._v(" "), _c('span', [_c('a', {
      attrs: {
        "href": "javascript:void(0);",
        "title": "试卷/考试"
      },
      on: {
        "click": function($event) {
          _vm.goToPaperBank(item.id)
        }
      }
    }, [_vm._v("试卷/考试")])])]), _vm._v(" "), _c('ul', {
      staticClass: "fl"
    }, [_c('li', [_c('p', [_vm._v("课程编号")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(item.idnumber))])]), _vm._v(" "), _c('li', [_c('p', [_vm._v("课程类型")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm._f("courseType")(item.category, _vm.categories)))])]), _vm._v(" "), _c('li', [_c('p', [_vm._v("课程课时")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(item.numsections))])])])]), _vm._v(" "), _c('div', {
      staticClass: "show"
    }, [_vm._v(_vm._s(item.summary))])])])])
  }))] : _c('p', {
    staticStyle: {
      "text-align": "center"
    },
    domProps: {
      "textContent": _vm._s(_vm.errorMsg)
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "add-courselib",
    on: {
      "click": function($event) {
        _vm.courseCategories(_vm.categories)
      }
    }
  }, [_c('router-link', {
    attrs: {
      "to": "/courselib/coursem/add"
    }
  }, [_vm._v("添加课程")])], 1)], 2), _vm._v(" "), _c('div', {
    staticClass: "paging course-paging clearfix"
  }, [_c('el-pagination', {
    attrs: {
      "background": "",
      "layout": "total,sizes,prev,pager,next,jumper",
      "current-page": _vm.page,
      "page-sizes": [5, 10, 20, 50],
      "page-size": _vm.rows,
      "total": _vm.totalpage
    },
    on: {
      "size-change": _vm.handleSizeChange,
      "current-change": _vm.handleCurrentChange
    }
  })], 1)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "btn"
  }, [_c('span', {
    staticClass: "left"
  }), _vm._v(" "), _c('span', {
    staticClass: "right"
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6057d64e", module.exports)
  }
}

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(84)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(86),
  /* template */
  __webpack_require__(87),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libchapter.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libchapter.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-1054dc46", Component.options)
  } else {
    hotAPI.reload("data-v-1054dc46", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(85);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("4a73c000", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-1054dc46!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libchapter.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-1054dc46!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libchapter.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n.libchapter{\n    background: #fff;\n    color: #000;\n    padding: 10px 0;\n}\n.add-chapter {\n    padding: 5px 0;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    cursor: pointer;\n}\n/* 弹窗内容样式 */\n#add-lib-form{\n    width: 80%;\n    margin: 0 auto;\n    overflow: hidden;\n}\n#add-lib-form p{\n    height: 40px;\n    line-height: 40px;\n    font-size: 20px;\n    margin: 20px 0;\n    text-align: center;\n}\n#add-lib-form p span{\n    margin-right: 20px;\n    cursor: move;\n}\n#add-lib-form p input{\n    text-indent: 10px;\n}\n#add-lib-form p input{\n    width: 300px;\n    height: 36px;\n    outline: none;\n    border: 1px solid gray;\n    font-size: 16px;\n    border-radius: 8px;\n    transition: all .3s;\n}\n#add-lib-form p input:focus{\n    border-color: #32B16C;\n}\n#add-lib-form .wrap-item{\n    position: relative;\n}\n#add-lib-form .wrap-item i.remove{\n    position: absolute;\n    top: 45%;\n    right: 8%;\n    font-family: '\\5B8B\\4F53';\n    font-style: normal;\n    margin-left: 10px;\n    cursor: pointer;\n}\n#add-lib-form .add-item a{\n    color: #4898d5;\n}\n\n", ""]);

// exports


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        var thisVue = this;
        return {
            // 章节数据
            coursedata: [],
            knobbledata: [],
            curCourseid: thisVue.$route.query.d, // 当前课程的id
            errorMsgChapter: '没有当前课程的章节信息！',
            errorMsgKnobble: '该章还没有小节信息'
        };
    },
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        // 从from.path来，到to.path去
        // 在渲染该组件的对应路由被confirm前调用
        // 不能 获取组件实例 因为当钩子执行时，组件实例还没有被创建
        // 钩子最后一定要调用next();
        next(function (vm) {
            vm.repuestData(vm);
        });
    },
    beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {
        // 当当前组件路由改变，但是该组件被复用时调用
        // 一般用于带有参数的路径，可以访问this了
        var thisVue = this;
        thisVue.repuestData(thisVue);
        next();
    },
    beforeRouteLeave: function beforeRouteLeave(to, from, next) {
        // 离开该组件对应的路由时调用
        // 可以访问当前this
        next();
    },
    created: function created() {
        var thisVue = this;
    },
    activated: function activated() {
        // 组件每次加载都会执行,不论组件是否被缓存
        var thisVue = this;
        // TODO 更具课程id请求课程数据
        if (thisVue.curCourseid) {
            thisVue.repuestData(thisVue);
        } else {
            window.location.href = API_ENV.API_ProjectRoot + "Index/Main/library";
        }
    },
    // 初始化组件时都会执行，如果组件被缓存，则只会加载一次
    mounted: function mounted() {},
    methods: {
        repuestData: function repuestData(thisVue) {
            var thisVue = thisVue || this;
            var courseid = this.$route.query.d;
            var datalist = {
                module: 'service',
                controller: 'Course_Sections_Con',
                action: 'queSections',
                courseid: thisVue.curCourseid
            };
            $.ajax({
                url: API_ENV.API_URL,
                type: "POST",
                // dataType: 'json',
                data: datalist,
                success: function success(response) {
                    var response = JSON.parse(response);
                    window.utiltool.checkLoginStatus(response.status);
                    if (!response.status && window.utiltool.isArray(response.data)) {
                        for (var i = response.data.length - 1; i >= 0; i--) {
                            if (!response.data[i].child) {
                                response.data[i].child = [];
                            }
                        }
                        thisVue.coursedata = response.data;
                        thisVue.errorMsg = '';
                        console.log('课程详细数据', response);
                    } else {
                        thisVue.errorMsg = '没有该课程的章节信息！';
                    }
                },
                error: function error(err) {
                    console.log('课程详细数据请求失败！', err);
                }
            });
        },
        chapterDownUp: function chapterDownUp(event) {
            var thiUl = $(event.path[0]).parent().siblings('ul');
            var liL = thiUl.children('li').length;
            var thisI = $(event.path[0]).siblings('i');
            if (parseInt(thiUl.css('height'))) {
                thisI.css('background-position', '-80px -63px');
                thiUl.stop().animate({
                    height: 0
                }, 300, function () {
                    thiUl.find('.revamp').css("height", "0");
                });
            } else {
                thisI.css('background-position', '-116px -63px');
                thiUl.stop().animate({
                    height: liL * 50 + 'px'
                }, 300);
            }
            this.resort(thiUl); // 注册排序
        },
        knobbleDownUp: function knobbleDownUp(event) {
            console.log(event);
            var thisEvent = event;
            var ulHeightArr = [];
            var ul = $('.table-list > ul');
            //保存原始高度
            for (var i = 0; i < ul.length; i++) {
                ulHeightArr[i] = ul.eq(i).find('.knobble-list').length * 55;
            }
            var knobbleTitle = $(event.path[0]).parents('.knobble-title');
            var thisUl = knobbleTitle.parents('ul');
            var ulIndex = thisUl.parent().data('sort');
            var currentUlHeight = ulHeightArr[ulIndex - 1];
            var submit = $(event.path[0]).parents(".knobble-list").find(".revamp li.operation p span.submit");
            var cancel = $(event.path[0]).parents(".knobble-list").find(".revamp li.operation p span.cancel");
            thisUl.stop().animate({ 'height': currentUlHeight + 140 + 'px' }, 300);
            knobbleTitle.siblings('.revamp').stop().animate({ height: '120px' }, 300).parent().siblings().find('.revamp').animate({ height: '0' }, 300);
            // 取消事件
            cancel.on("click", function () {
                var thisUl = $(this).parents('.revamp').parents('ul');
                thisUl.stop().animate({ 'height': thisUl.height() - 140 + 'px' }, 300);
                $(this).parents('.revamp').stop().animate({ height: '0' }, 300, function () {
                    cancel.off("click");
                    submit.off("click");
                });
            });
            // 提交事件
            submit.on("click", function () {
                var knobbleId = $(this).parents('.knobble-list').find('.knobble-title small').text();
                var reName = $(this).parents('ul.clearfix').find('p.name input').val().trim();
                var reSummary = $(this).parents('ul.clearfix').find('p.summary textarea').val().trim();
                if (!reName) {
                    layer.msg('不能修改小节名称为空！', { icon: 2, time: 2000 }, function () {
                        $(this).parents('ul.clearfix').find('p.name input').focus();
                    });
                } else {
                    var data = {
                        module: 'service',
                        controller: 'Course_Sections_Con',
                        action: 'upSections',
                        courseid: $('.libchapter .add-chapter').attr('courseId'),
                        id: knobbleId,
                        type: '1',
                        name: reName,
                        summary: reSummary
                    };
                    console.log(data);
                    $.ajax({
                        url: API_ENV.API_URL,
                        type: 'POST',
                        data: data,
                        success: function success(data) {
                            var response = JSON.parse(data);
                            window.utiltool.checkLoginStatus(response.status);
                            if (!Number(response.status)) {
                                layer.msg(response.data, { icon: 1, time: 1500 }, function () {
                                    var li = $(thisEvent.path[3]);
                                    li.find('.knobble-title h3 span').text(reName);
                                    li.find('.revamp p input').val(reName);
                                    li.find('.revamp p.summary textarea').val(reSummary);
                                });
                            } else {
                                layer.msg(response.data, { icon: 2, time: 2000 });
                            }
                            // 解除点击事件
                            submit.off('click');
                        },
                        error: function error(err) {
                            console.log('小节修改提交失败！', err);
                        }
                    });
                }
            });
        },
        addKnobble: function addKnobble(event, chapterId) {
            var thisVue = this; // vue对象
            var eventVue = event;
            var nobbleLi = $('.libchapter .chapter ul li[chapterid=' + chapterId + ']').siblings('li');
            var sortArr = [];
            for (var i = 0; i < nobbleLi.length; i++) {
                sortArr.push(Number(nobbleLi.eq(i).data('sort')));
            }
            console.log(sortArr);
            var maxSort = nobbleLi.length ? Math.max.apply(null, sortArr) : 0;
            var html = '<div id="add-lib-form" class="knobble" onselectstart = "return false"><div class="wrap"><div class="wrap-item"><p><span>小节名称</span><input class="c-name" type="text" autofocus placeholder="" /></p><p><span>小节概要</span><input class="c-summary" type="text" placeholder="" /></p></div></div><p class="add-item"><a href="javascript:void(0);">继续添加</a></p></div>';
            layui.use('layer', function () {
                layer.open({
                    type: 1,
                    title: '添加章节小节',
                    maxmin: true,
                    content: html,
                    area: ['700px', '400px'],
                    btn: ['OK', '稍后回来', '重来一次'],
                    anim: 4,
                    tipsMore: true,
                    yes: function yes(index, layero) {
                        var knobbles = []; // 保存小节信息的数组
                        var inputN = $('#add-lib-form.knobble p input.c-name');
                        var inputS = $('#add-lib-form.knobble p input.c-summary');
                        for (var i = inputN.length - 1; i >= 0; i--) {
                            var currentNaVal = inputN.eq(i).val().trim();
                            var currentSuVal = inputS.eq(i).val().trim();
                            if (currentNaVal == '') {
                                knobbles = [];
                                break;
                            } else {
                                knobbles.push({
                                    'name': currentNaVal,
                                    'summary': currentSuVal,
                                    'sort': ''
                                });
                            }
                        }
                        if (!knobbles.length) {
                            layer.msg('亲，您的课程小节数据不正常！', { icon: 3, time: 3000 });
                        } else {
                            var reKnobbles = knobbles.reverse();
                            var reKnobblesLen = reKnobbles.length;
                            for (var i = 0; i < reKnobblesLen; i++) {
                                reKnobbles[i]['sort'] = maxSort + i + 1;
                            }
                            var data = {
                                'module': 'service',
                                'controller': 'Course_Sections_Con',
                                'action': 'addSections',
                                'pid': chapterId,
                                'courseid': thisVue.curCourseid,
                                'type': '1',
                                'dataList': reKnobbles
                            };
                            $.ajax({
                                url: API_ENV.API_URL,
                                type: 'POST',
                                data: data,
                                dataType: 'json',
                                success: function success(data) {
                                    console.log('提交成功！', data);
                                    window.utiltool.checkLoginStatus(data.status);
                                    if (data.status === 0) {
                                        for (var i = 0; i < data.data.length; i++) {
                                            for (var j = 0; j < thisVue.coursedata.length; j++) {
                                                if (thisVue.coursedata[j].id === chapterId) {
                                                    thisVue.coursedata[j].child.push(data.data[i]);
                                                    break;
                                                }
                                            }
                                        }
                                        layer.msg('小节添加成功！', { icon: 1, time: 2000 }, function () {
                                            $(eventVue.path[1]).animate({ height: $(eventVue.path[1]).height() + 50 * data.data.length + 'px' }, 500);
                                            layer.closeAll();
                                        });
                                        thisVue.resort($(event.path[1])); // 重新注册排序
                                    } else {
                                        layer.msg(data.data, { icon: 2, time: 1500 });
                                    }
                                },
                                error: function error(err) {
                                    console.log('提交失败！', err);
                                }
                            });
                        }
                    },
                    btn2: function btn2(index, layero) {
                        var _index = index;
                        layer.confirm('亲，离开后数据不会保存，确定离开吗？', { icon: 3, title: '温馨提示' }, function (index) {
                            layer.close(index);
                            layer.close(_index);
                        });
                        return false;
                    },
                    btn3: function btn3(index, layero) {
                        $('#add-lib-form.knobble p input').prop('value', '');
                        return false;
                    },
                    cancel: function cancel(index) {
                        layer.confirm('亲，离开后数据不会保存，确定离开吗？', { icon: 3, title: '温馨提示' }, function (index) {
                            layer.closeAll();
                        });
                        return false;
                    },
                    success: function success() {
                        $("#add-lib-form .add-item a").click(function () {
                            var inputHtml = $('<div style="margin-top: -140px;opacity: 0;" class="wrap-item"><p><span>小节名称</span><input class="c-name" type="text" autofocus placeholder="" /></p><p><span>小节概要</span><input class="c-summary" type="text" autofocus placeholder="" /></p><i class="remove" title="删除该小节">×</i></div>');
                            inputHtml.appendTo($("#add-lib-form .wrap")).animate({ marginTop: '0', opacity: 1 }, 300, 'swing');
                            inputHtml.find('i').on('click', function () {
                                console.log($(this));
                                $(this).parents('.wrap-item').animate({ marginTop: '-140px', opacity: 0 }, 300, 'swing', function () {
                                    $(this).off('click').remove();
                                });
                            });
                        });
                    }
                });
            });
        },
        addChapter: function addChapter() {
            var thisVue = this;
            var pageChapter = $('.libchapter .chapter');
            var sortArr = [];
            for (var i = pageChapter.length - 1; i >= 0; i--) {
                sortArr.push(Number(pageChapter.eq(i).data('sort')));
            }
            var maxSort = pageChapter.length ? Math.max.apply(null, sortArr) : 0;
            var html = '<div id="add-lib-form" class="chapters" onselectstart = "return false"><div class="wrap"><div class="wrap-item"><p><span>章节名称</span><input class="h-name" type="text" autofocus placeholder="" /></p><p><span>章节概要</span><input class="h-summary" type="text" placeholder="" /></p><p><span>章节课时</span><input class="h-time" type="number" placeholder="" /></p></div></div><p class="add-item"><a href="javascript:void(0);">继续添加</a></p></div>';
            layui.use('layer', function () {
                layer.open({
                    type: 1,
                    title: '添加章节',
                    maxmin: true,
                    content: html,
                    area: ['700px', '400px'],
                    btn: ['OK', '稍后回来', '重来一次'],
                    anim: 4,
                    tipsMore: true,
                    yes: function yes(index, layero) {
                        var chapters = [];
                        var inputN = $('#add-lib-form.chapters p input.h-name');
                        var inputS = $('#add-lib-form.chapters p input.h-summary');
                        var inputT = $('#add-lib-form.chapters p input.h-time');
                        for (var i = inputN.length - 1; i >= 0; i--) {
                            var currentNaVal = inputN.eq(i).val().trim();
                            var currentSuVal = inputS.eq(i).val().trim();
                            var currentTaVal = inputT.eq(i).val().trim();
                            if (currentNaVal == '' || currentTaVal == '') {
                                chapters = [];
                                break;
                            } else {
                                chapters.push({
                                    'name': currentNaVal,
                                    'summary': currentSuVal,
                                    'section': currentTaVal,
                                    'sort': ''
                                });
                            }
                        }
                        if (!chapters.length) {
                            layer.msg('亲，您的课程章节数据不正常！', { icon: 2, time: 2000 });
                        } else {
                            var reChapters = chapters.reverse();
                            var reChaptersLen = reChapters.length;
                            for (var i = 0; i < reChaptersLen; i++) {
                                reChapters[i]['sort'] = maxSort + i + 1;
                            }
                            var data = {
                                'module': 'service',
                                'controller': 'Course_Sections_Con',
                                'action': 'addSections',
                                'pid': '',
                                'courseid': thisVue.curCourseid,
                                'type': '0',
                                'dataList': reChapters
                            };
                            console.log(data);
                            $.ajax({
                                url: API_ENV.API_URL,
                                type: 'POST',
                                dataType: 'json',
                                data: data,
                                success: function success(data) {
                                    console.log('提交成功!', data);
                                    window.utiltool.checkLoginStatus(data.status);
                                    if (data.status === 0) {
                                        var addChapter = {};
                                        for (var i = 0; i < data.data.length; i++) {
                                            var _addChapter;

                                            var addChapter = (_addChapter = {
                                                id: data.data[i].courseid,
                                                name: data.data[i].name
                                            }, _defineProperty(_addChapter, 'id', data.data[i].id), _defineProperty(_addChapter, 'child', []), _defineProperty(_addChapter, 'sort', data.data[i].sort), _defineProperty(_addChapter, 'summary', data.data[i].summary), _addChapter);
                                            thisVue.coursedata.push(addChapter);
                                        }
                                        layer.msg('添加章节成功！', { icon: 1, time: 1000 }, function () {
                                            layer.closeAll();
                                        });
                                    } else {
                                        layer.msg(data.data, { icon: 2, time: 2000 });
                                    }
                                },
                                error: function error(err) {
                                    console.log('提交失败!', err);
                                }
                            });
                        }
                    },
                    btn2: function btn2(index, layero) {
                        var _index = index;
                        layer.confirm('亲，离开后数据不会保存，确定离开吗？', { icon: 3, title: '温馨提示' }, function (index) {
                            layer.close(index);
                            layer.close(_index);
                        });
                        return false;
                    },
                    btn3: function btn3(index, layero) {
                        $('#add-lib-form.chapter p input').prop('value', '');
                        return false;
                    },
                    cancel: function cancel(index) {
                        var _index = index;
                        layer.confirm('亲，离开后数据不会保存，确定离开吗？', { icon: 3, title: '温馨提示' }, function (index) {
                            layer.close(index);
                            layer.close(_index);
                        });
                        return false;
                    },
                    success: function success() {
                        $("#add-lib-form .add-item a").click(function () {
                            var inputHtml = $('<div style="margin-top: -140px;opacity: 0;" class="wrap-item"><p><span>章节名称</span><input class="h-name" type="text" autofocus placeholder="" /></p><p><span>章节概要</span><input class="h-summary" type="text" placeholder="" /></p><p><span>小节课时</span><input class="h-time" type="number" placeholder="" /></p><i class="remove" title="删除该章节">×</i></div>');
                            inputHtml.appendTo($("#add-lib-form .wrap")).animate({ marginTop: '0', opacity: 1 }, 300, 'swing').find('i').on('click', function () {
                                $(this).parent().animate({ marginTop: '-140px', opacity: 0 }, 300, 'swing', function () {
                                    $(this).off('click').remove();
                                });
                            });
                        });
                    }
                });
            });
        },
        deleteChapterTitle: function deleteChapterTitle(event, chapterId) {
            var thisVue = this;
            var data = {
                module: 'service',
                controller: 'Course_Sections_Con',
                action: 'delSections',
                type: '0',
                id: chapterId
            };
            console.log('删除章', data);
            layer.confirm('该章及其下的所有小节都会被删除，确定删除吗?', { icon: 3, title: '提示' }, function (index) {
                $.ajax({
                    url: API_ENV.API_URL,
                    type: 'POST',
                    data: data,
                    success: function success(data) {
                        console.log('删除章提交成功！', data);
                        var response = JSON.parse(data);
                        window.utiltool.checkLoginStatus(response.status);
                        if (response.status == '0') {
                            layer.msg(response.data, { icon: 1, time: 1500 }, function () {
                                for (var i = thisVue.coursedata.length - 1; i >= 0; i--) {
                                    if (thisVue.coursedata[i].id === chapterId) {
                                        thisVue.coursedata.removeByValue(thisVue.coursedata[i]);
                                    }
                                }
                            });
                        } else {
                            layer.msg(response.data, { icon: 2, time: 2000 });
                        }
                    },
                    error: function error(err) {
                        console.log('删除章提交失败！', err);
                    }
                });
                layer.close(index);
            });
        },
        knobbleUpfile: function knobbleUpfile(event, knobbleId) {
            var html = '<form id="knobble-upfile"><div class="looking"><div class="up-wrap"><span class="upfile-con"><input type="file" name="files[]" id="knobbleupfile" multiple></span><span class="read">浏览</span><div class="mark"></div></div></div><input type="hidden" value=' + knobbleId + ' name="id"><input type="hidden" name="module" value="service"><input type="hidden" name="controller" value="Course_con"><input type="hidden" name="action" value="addCourse"></form>';
            layui.use('layer', function () {
                layer.open({
                    type: 1,
                    title: '小节文件上传',
                    area: ['400px', '200px'],
                    content: html,
                    btn: ['上传', '取消'],
                    anim: '2',
                    tipsMore: true,
                    success: function success(layero, index) {
                        var filesArr = [];
                        $("#knobbleupfile").fileupload({
                            url: API_ENV.API_URL,
                            dataType: 'json',
                            autoUpload: false,
                            minFileSize: 0,
                            maxFileSize: 1024000 * 10, // 10M
                            maxNumberOfFiles: 5,
                            messages: {
                                uploadedBytes: 'Uploaded bytes exceed file size',
                                maxNumberOfFiles: 'Maximum number of files exceeded',
                                maxFileSize: '哎呀！您的文件太大了，请保持在5M以内！',
                                minFileSize: 'sorry！您的文件有点小了，请保持在5M以内！'
                            }
                        }).on('fileuploadadd', function (e, data) {
                            // 当文件被添加到上传组件时被触发
                            console.log('fileuploadadd', data);
                            data.context = $('#knobble-upfile .mark').append("<div class='up-progress'></div>");
                            $.each(data.files, function (index, file) {
                                filesArr.push(file); // 多文件上传
                            });
                        }).on('fileuploadprocessalways', function (e, data) {
                            //  当一个单独的文件处理队列结束（完成或失败时）触发
                            console.log('fileuploadprocessalways', data);
                            var index = data.index,
                                file = data.files[index];
                            if (!file.error) {
                                // 把上传组件数据绑定到自定义元素上
                                data.files = filesArr;
                                console.log('上传文件列表：', filesArr);
                                var node = filesArr.length > 1 ? $('<span/>').text('本次上传' + filesArr.length + '个文件') : $('<span/>').text(filesArr[0].name);
                                data.context.append(node);
                                layero.data(data);
                            } else if (file.error) {
                                layer.msg(file.error, { icon: 2, time: 2000 }, function () {
                                    filesArr = [];
                                    $('#knobble-upfile .mark').html('');
                                });
                            } else {
                                layer.msg('上传图片好像出了点问题！', { icon: 3, time: 3000 }, function () {
                                    filesArr = [];
                                    $('#knobble-upfile .mark').html('');
                                });
                            }
                        }).on('fileuploadprogressall', function (e, data) {
                            // 全局上传处理事件的回调函数
                            console.log('fileuploadprogressall', data);
                            var progress = parseInt(data.loaded / data.total * 100, 10);
                            // console.log('上传进度 : ', progress + '%');
                            $('#knobble-upfile .mark .up-progress').animate({ 'width': progress + '%' }, 300, function () {
                                $('#knobble-upfile .mark').css({
                                    'color': '#fff',
                                    'borderColor': '#32B16C'
                                });
                            });
                        }).on('fileuploaddone', function (e, data) {
                            // 上传请求成功时触发的回调函数，如果服务器返回一个带有error属性的json响应这个函数也会被触发
                            console.log('fileuploaddone', data);
                            window.utiltool.checkLoginStatus(data.result.status);
                            if (!data.result.status) {
                                layer.msg(data.result.data, { icon: 1, time: 2000 }, function () {
                                    window.location.reload();
                                });
                            } else {
                                layer.msg(data.result.data, { icon: 2, time: 2000 });
                            }
                            /*$.each(data.result.files, function (index, file) {
                                if (file.url) {
                                    // 预览
                                    console.log('上传成功！', file);
                                } else if (file.error) {
                                    var error = $('<span class="text-danger"/>').text(file.error);
                                    $(data.context.children()[index]).append(error);
                                }
                            });*/
                        }).on('fileuploadfail', function (e, data) {
                            // 上传请求失败时触发的回调函数，如果服务器返回一个带有error属性的json响应这个函数将不会被触发。
                            console.log('fileuploadfail', e, data);
                            // layer.msg(data.result.data, {icon: 2, time: 2000});
                            $.each(data.files, function (index) {
                                var error = $('<span class="text-danger"/>').text('文件上传失败！');
                                $(data.context.children()[index]).append(error);
                            });
                        }).prop('disabled', !$.support.fileInput);
                    },
                    yes: function yes(index, layero) {
                        var fileData = layero.data();
                        console.log('文件提交表单对象', fileData);
                        if (fileData.submit) {
                            fileData.submit(); // 提交文件
                        } else {
                            layer.msg('亲，先选择上传的文件再来试试！', { icon: 2, time: 2000 });
                        }
                    },
                    btn2: function btn2() {},
                    cancel: function cancel() {}
                });
            });
        },
        deleteKnobble: function deleteKnobble(event, chapterId, knobbleId) {
            var thisVue = this;
            var data = {
                module: 'service',
                controller: 'Course_Sections_Con',
                action: 'delSections',
                type: '1',
                id: knobbleId
            };
            console.log('删除小节的数据', data);
            layer.confirm("正在准备删除该小节，确定删除吗?", { icon: 3, title: '提示' }, function (index) {
                $.ajax({
                    url: API_ENV.API_URL,
                    type: 'POST',
                    data: data,
                    success: function success(data) {
                        var response = JSON.parse(data);
                        window.utiltool.checkLoginStatus(response.status);
                        if (!Number(response.status)) {
                            // window.location.reload();
                            for (var i = 0; i < thisVue.coursedata.length; i++) {
                                var currentVal = thisVue.coursedata[i];
                                if (currentVal.id === chapterId) {
                                    for (var j = 0; j < currentVal.child.length; j++) {
                                        if (currentVal.child[j].id === knobbleId) {
                                            currentVal.child.removeByValue(currentVal.child[j]);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                            layer.msg(response.data, { icon: 1, time: 1500 }, function () {
                                $(event.path[4]).stop().animate({
                                    height: $(event.path[4]).height() - 50 + 'px'
                                }, 500);
                            });
                        } else {
                            layer.msg(response.data, { icon: 2, time: 2000 });
                        }
                    },
                    error: function error(err) {
                        console.log('删除小节提交失败！', err);
                    }
                });
                layer.closeAll();
            });
        },
        resort: function resort(currentElement) {
            var oldArr = []; // 保存原始列表的id和对应的序号
            var newArr = []; // 保存拖拽后列表的id和对应的序号
            var oldDrag = currentElement.find('.drag');
            var oldDragLen = oldDrag.length;
            for (var i = 0; i < oldDragLen; i++) {
                oldArr[i] = oldDrag.eq(i).data('sort');
            }
            var sort = currentElement.sortable({
                handle: ".move",
                delay: 0,
                helper: "clone",
                opacity: 0.5,
                revert: 200,
                tolerance: "pointer",
                zIndex: 9999,
                containment: "parent"
            });
            currentElement.on("sortupdate", function (event, ui) {
                var changeArr = [];
                var newDrag = currentElement.find('.drag');
                var newDragLen = newDrag.length;
                for (var i = 0; i < newDragLen; i++) {
                    newArr[i] = newDrag.eq(i).data('sort');
                }
                for (var j = 0; j < newDragLen; j++) {
                    if (oldArr[j] !== newArr[j]) {
                        var data = {
                            id: newDrag.eq(newArr[j] - 1).find('small').text(),
                            sort: newArr[j]
                        };
                        changeArr.push(data);
                    } else {
                        continue;
                    }
                }
                console.log(oldArr, newArr, changeArr);
                // 提交数据
                var data = {
                    module: 'service',
                    controller: 'Course_Sections_Con',
                    action: 'rankSections',
                    sort: changeArr
                };
                console.log('排序', data);
                $.ajax({
                    url: API_ENV.API_URL,
                    type: 'POST',
                    data: data,
                    success: function success(data) {
                        var data = JSON.parse(data);
                        window.utiltool.checkLoginStatus(data.status);
                        if (parseInt(data.data) === 1) {
                            console.log('重排成功！');
                        } else {
                            console.log('重排失败！');
                            currentElement.sortable("cancel"); // 返回上一步
                        }
                    },
                    error: function error(err) {
                        console.log('重排提交失败！', err);
                    }
                });

                function reSortArr(reasonArr, aimArr) {
                    var newArr = [];
                }
            });
        },
        sendChapterToEdit: function sendChapterToEdit(chapter) {
            this.$root.Bus.$emit("sendChapter", chapter);
        },
        addfile: function addfile(chaptername, chapterID, knobblename, knobbleID, type) {
            var thisVue = this;
            var data = {};
            if (type === 1) {
                // 章
                data = {
                    course: thisVue.curCourse.id,
                    course_sections: chapterID,
                    flag: 1, // 标识   0:课程|1:章节
                    crumbsMsg: '课程库 <span> &gt; </span> 课程(' + thisVue.curCourse.fullname + ') <span> &gt; </span> 章(' + chaptername + ')'
                };
            } else if (type === 2) {
                // 节
                data = {
                    course: thisVue.curCourse.id,
                    course_sections: knobbleID,
                    flag: 'sections', // 标识
                    crumbsMsg: '课程库 <span> &gt; </span> 课程(' + thisVue.curCourse.fullname + ') <span> &gt; </span> 章(' + chaptername + ') <span> &gt; </span> 节(' + knobblename + ')'
                };
            }
            window.sessionStorage.setItem("addFileData", JSON.stringify(data));
            this.$root.Bus.$emit('sendMsgToFile', data);
        }
    },
    watch: {
        "coursedata": {
            handler: function handler(val, oldval) {
                console.log('章节数据变化监测');
                console.log(val, oldval);
            },
            deep: true
        }
    },
    beforeDestroy: function beforeDestroy() {
        this.$root.Bus.$off('sendCourseToChapter');
        // window.sessionStorage.removeItem('currentCourseId');
    }
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "course-lib"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "libchapter"
  }, [(_vm.coursedata.length > 0) ? _vm._l((_vm.coursedata), function(chapter) {
    return _c('div', {
      staticClass: "chapter table-list",
      attrs: {
        "data-sort": chapter.sort
      }
    }, [_c('h2', [_c('i'), _c('small', [_vm._v(_vm._s(chapter.id))]), _vm._v(" "), _c('strong', {
      staticClass: "chapter-title",
      on: {
        "click": function($event) {
          _vm.chapterDownUp($event)
        }
      }
    }, [_vm._v(_vm._s(chapter.name))]), _vm._v(" "), _c('p', {
      staticClass: "fr"
    }, [_c('span', {
      staticClass: "addfile",
      on: {
        "click": function($event) {
          _vm.addfile(chapter.name, chapter.id, '', '', 1)
        }
      }
    }, [_c('router-link', {
      attrs: {
        "to": "/courselib/libaddfile"
      }
    }, [_vm._v("添加附件")])], 1), _vm._v(" "), _c('span', {
      staticClass: "re",
      on: {
        "click": function($event) {
          _vm.sendChapterToEdit(chapter)
        }
      }
    }, [_c('router-link', {
      attrs: {
        "to": "/courselib/libeditchapter"
      }
    }, [_vm._v("修改")])], 1), _vm._v(" "), _c('span', {
      staticClass: "del",
      on: {
        "click": function($event) {
          $event.stopPropagation();
          _vm.deleteChapterTitle($event, chapter.id)
        }
      }
    }, [_c('a', {
      attrs: {
        "href": "javascript:void(0)"
      }
    }, [_vm._v("删除")])])])]), _vm._v(" "), _c('ul', {
      staticClass: "sortable"
    }, [(chapter.child.length < 1) ? _c('p', {
      staticStyle: {
        "text-align": "center"
      },
      domProps: {
        "textContent": _vm._s(_vm.errorMsgKnobble)
      }
    }) : _vm._l((chapter.child), function(item) {
      return _c('li', {
        staticClass: "knobble-list drag",
        attrs: {
          "data-sort": item.sort
        }
      }, [_c('div', {
        staticClass: "knobble-title"
      }, [_c('h3', {
        staticClass: "move"
      }, [_c('small', [_vm._v(_vm._s(item.id))]), _c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('p', [_c('span', {
        staticClass: "upfile",
        on: {
          "click": function($event) {
            _vm.addfile(chapter.name, chapter.id, item.name, item.id, 2)
          }
        }
      }, [_c('router-link', {
        attrs: {
          "to": "/courselib/libaddfile"
        }
      }, [_vm._v("添加附件")])], 1), _vm._v(" "), _c('span', {
        staticClass: "re",
        on: {
          "click": function($event) {
            _vm.knobbleDownUp($event)
          }
        }
      }, [_vm._v("修改")]), _vm._v(" "), _c('span', {
        staticClass: "del",
        on: {
          "click": function($event) {
            _vm.deleteKnobble($event, chapter.id, item.id)
          }
        }
      }, [_vm._v("删除")])])]), _vm._v(" "), _c('div', {
        staticClass: "revamp"
      }, [_c('ul', {
        staticClass: "clearfix"
      }, [_c('li', [_c('h4', [_vm._v("快速编辑")]), _vm._v(" "), _c('p', {
        staticClass: "name"
      }, [_c('span', [_vm._v("名称")]), _c('input', {
        attrs: {
          "type": "text"
        },
        domProps: {
          "value": item.name
        }
      })])]), _vm._v(" "), _c('li', [_c('h5', [_vm._v("摘要")]), _vm._v(" "), _c('p', {
        staticClass: "summary"
      }, [_c('textarea', {
        attrs: {
          "name": "",
          "id": "",
          "cols": "",
          "rows": ""
        }
      }, [_vm._v(_vm._s(item.summary))])])]), _vm._v(" "), _c('li', {
        staticClass: "operation"
      }, [_c('p', {
        staticClass: "deal"
      }, [_c('span', {
        staticClass: "cancel"
      }, [_vm._v("取消")]), _c('span', {
        staticClass: "submit"
      }, [_vm._v("更新")])])])])])])
    }), _vm._v(" "), _c('li', {
      staticClass: "add-knobble",
      attrs: {
        "chapterid": chapter.id
      },
      on: {
        "click": function($event) {
          _vm.addKnobble($event, chapter.id)
        }
      }
    }, [_vm._v("添加小节")])], 2)])
  }) : _c('p', {
    staticStyle: {
      "text-align": "center"
    },
    domProps: {
      "textContent": _vm._s(_vm.errorMsgChapter)
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "add-chapter",
    attrs: {
      "courseId": _vm.curCourseid
    },
    on: {
      "click": function($event) {
        _vm.addChapter()
      }
    }
  }, [_c('a', {
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("添加章节")])])], 2)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "classify clearfix"
  }, [_c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("章节管理")])])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-1054dc46", module.exports)
  }
}

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(89)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(91),
  /* template */
  __webpack_require__(92),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libAddCourse.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libAddCourse.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-67bbd00c", Component.options)
  } else {
    hotAPI.reload("data-v-67bbd00c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(90);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("56c44ab2", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-67bbd00c!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libAddCourse.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-67bbd00c!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libAddCourse.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);

// exports


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        var thisVue = this;
        return {
            // 课程库添加课程
            categories: [], //课程类型,
            organizationList: [],
            props: {
                value: 'id',
                label: 'name',
                children: 'children'
            },
            form: {
                department: function () {
                    var arr = [];
                    arr.push(thisVue.Const.userMsg.pid);
                    return arr;
                }(),
                fullname: '课程全名12df3',
                shortname: '课程简称12dfsd3',
                idnumber: 'bianhao12fs3',
                category: '',
                numsections: '123',
                summary: '课程概要123',
                files: null
            },
            checkRules: {
                fullname: [{ required: true, message: '请输入课程全名', trigger: 'blur' }],
                shortname: [{ required: true, message: '请输入课程简称', trigger: 'blur' }],
                idnumber: [{ required: true, message: '请输入课程编号', trigger: 'blur' }],
                category: [{ required: true, message: '请选择课程类型', trigger: 'change' }],
                numsections: [{ required: true, message: '请输入课程课时', trigger: 'blur' }],
                summary: [{ required: true, message: '请输入对该课程的概要', trigger: 'blur' }]
            },
            imageUrl: '',
            currentcourse: []
        };
    },
    created: function created() {
        var thisVue = this;
    },
    activated: function activated() {},
    mounted: function mounted() {
        var thisVue = this;
        thisVue.$nextTick(function () {
            if (thisVue.$route.params.cat === 'add') {
                thisVue.fnReqCatByOrgid(thisVue.Const.userMsg.pid);
                thisVue.getOrganization();
            } else if (thisVue.$route.params.cat === 'edit') {
                thisVue.fnReqCourseById(function () {
                    thisVue.fnReqCatByOrgid(thisVue.currentcourse[0].org_id);
                });
            }
        });
    },
    methods: {
        // 课程封面图片上传
        handleCoverChange: function handleCoverChange(file, fileList) {
            var picTypeList = ['image/jpeg', 'image/png'];
            var isPic = new RegExp(',' + file.raw.type + ',').test(',' + picTypeList.join() + ',');
            var isSize = file.size < 2 * 1024 * 1024;
            if (isPic && isSize) {
                this.form.files = file.raw;
                this.imageUrl = URL.createObjectURL(file.raw);
            } else {
                this.$message({ type: 'info', message: '只允许上传小于 2MB 的 jpg|png 图片' });
            }
        },

        // 提交添加课程
        onSubmitAdd: function onSubmitAdd(refform) {
            window.utiltool.checkCookie();
            var thisVue = this;
            this.$refs[refform].validate(function (valid) {
                if (valid) {
                    var loading = thisVue.$loading({
                        lock: true,
                        text: '正在添加，请稍后...',
                        spinner: 'el-icon-loading',
                        background: 'rgba(0, 0, 0, 0.7)'
                    });
                    var params = Object.assign({
                        module: 'service',
                        controller: 'Course_con',
                        action: 'addCourse'
                    }, thisVue.form);
                    params.department = thisVue.form.department.concat([]).pop();
                    var formDate = new FormData();
                    for (var key in params) {
                        formDate.append(key, params[key]);
                    }
                    $.ajax({
                        url: API_ENV.API_URL,
                        type: 'POST',
                        processData: false,
                        contentType: false,
                        data: formDate,
                        success: function success(res) {
                            loading.close();
                            var resData = JSON.parse(res);
                            if (resData.status === 0) {
                                thisVue.$message({ type: 'success', message: resData.data });
                            } else {
                                thisVue.$message({ type: 'info', message: resData.data ? resData.data : '添加失败！' });
                            }
                        },
                        error: function error(_error) {
                            thisVue.$message({ type: 'error', message: '添加失败！' });
                        }
                    });
                } else {
                    return false;
                }
            });
        },
        fnReqCourseById: function fnReqCourseById(fn) {
            var thisVue = this;
            $.ajax({
                url: API_ENV.API_URL,
                type: 'POST',
                dataType: 'json',
                data: {
                    module: 'Service',
                    controller: 'Course_Con',
                    action: 'getCourseInfo',
                    course: function () {
                        if (thisVue.$route.query.ed) {
                            return thisVue.$route.query.ed;
                        } else {
                            window.location.href = API_ENV.API_ProjectRoot + "Index/Main/library";
                        }
                    }()
                },
                success: function success(response) {
                    console.log('课程数据', response);
                    if (!response.status) {
                        thisVue.currentcourse = response.data;
                        thisVue.form.department = response.data[0].org_id;
                        thisVue.form.fullname = response.data[0].fullname;
                        thisVue.form.shortname = response.data[0].shortname;
                        thisVue.form.idnumber = response.data[0].idnumber;
                        thisVue.form.category = response.data[0].cate_id;
                        thisVue.form.numsections = response.data[0].numsections;
                        thisVue.form.summary = response.data[0].summary;
                        thisVue.form.id = response.data[0].id;
                        fn && fn();
                    } else {
                        window.utiltool.dealErr({
                            level: 2,
                            msg: response.data
                        });
                    }
                },
                error: function error(err) {
                    window.utiltool.dealErr({
                        level: 1,
                        msg: '请求课程数据报错'
                    });
                }
            });
        },
        // 提交修改课程
        onSubmitEdit: function onSubmitEdit(refform) {
            window.utiltool.checkCookie();
            var thisVue = this;
            this.$refs[refform].validate(function (valid) {
                if (valid) {
                    var params = Object.assign({
                        module: 'Service',
                        controller: 'Course_Con',
                        action: 'upCourse'
                    }, thisVue.form);
                    var formDate = new FormData();
                    for (var key in params) {
                        formDate.append(key, params[key]);
                    }
                    $.ajax({
                        url: API_ENV.API_URL,
                        type: 'POST',
                        processData: false,
                        contentType: false,
                        data: formDate,
                        success: function success(res) {
                            res = JSON.parse(res);
                            if (!res.status) {
                                thisVue.$message({ type: 'success', message: res.data ? res.data : '修改成功！' });
                                thisVue.$router.push({ path: '/' });
                            } else {
                                thisVue.$message({ type: 'info', message: res.data ? res.data : '修改失败！' });
                            }
                        },
                        error: function error(_error2) {
                            thisVue.$message({ type: 'error', message: '提交失败！' });
                        }
                    });
                } else {
                    return false;
                }
            });
        },
        // 机构选择
        fnSelOrgChange: function fnSelOrgChange(vurrentVal) {
            this.form.selOrg = vurrentVal;
        },
        getOrganization: function getOrganization() {
            // 请求全部机构数据
            window.utiltool.checkCookie();
            var thisVue = this;
            // 请求机构信息和课堂类型信息
            var param = {
                'module': 'service',
                'controller': 'Organization_Con',
                'action': 'getUserOrgAll'
            };
            $.ajax({
                url: API_ENV.API_URL,
                type: 'POST',
                data: param,
                success: function success(data) {
                    var data = JSON.parse(data);
                    window.utiltool.checkLoginStatus(data.status);
                    if (!data.status && _typeof(data.data) === 'object') {
                        thisVue.organizationList = function () {
                            var arr = [];
                            arr.push(data.data);
                            return arr;
                        }();
                    } else {
                        thisVue.$message({ type: 'error', message: data.data ? data.data : '获取机构信息出错了！' });
                    }
                },
                error: function error(err) {
                    thisVue.$message({ type: 'error', message: '获取机构信息出错了！' });
                }
            });
        },
        fnReqCatByOrgid: function fnReqCatByOrgid(orgid) {
            var thisVue = this;
            $.ajax({
                url: API_ENV.API_URL,
                type: 'POST',
                dataType: 'json',
                data: {
                    module: 'Service',
                    controller: 'Course_Categories_Con',
                    action: 'getCate',
                    organization: orgid
                },
                success: function success(response) {
                    if (!response.status && window.utiltool.isArray(response.data)) {
                        thisVue.categories = response.data;
                    } else {
                        window.utiltool.dealErr({
                            level: 2,
                            msg: response.data
                        });
                    }
                },
                error: function error(err) {
                    window.utiltool.dealErr({
                        level: 1,
                        msg: '按机构请求类型数据报错'
                    });
                }
            });
        }
    },
    beforeDestroy: function beforeDestroy() {
        this.$root.Bus.$off("sendCategories");
    }
};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "content",
    attrs: {
      "id": "add-course"
    }
  }, [_c('div', {
    staticClass: "course-lib"
  }, [_c('div', {
    staticClass: "classify clearfix"
  }, [_c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0px"
    }
  }), _vm._v(" "), (_vm.$route.params.cat === 'add') ? _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("添加新课程")]) : _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("修改课程信息")])])]), _vm._v(" "), _c('div', {
    staticClass: "fr"
  }, [_c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.$router.back(-1);
      }
    }
  }, [_vm._v("返回")])], 1)]), _vm._v(" "), _c('div', {
    staticClass: "add-course-form"
  }, [_c('el-form', {
    ref: "addCourseForm",
    attrs: {
      "status-icon": true,
      "rules": _vm.checkRules,
      "model": _vm.form,
      "label-width": "120px"
    }
  }, [_c('el-form-item', {
    attrs: {
      "label": "所属机构"
    }
  }, [(_vm.$route.params.cat === 'add') ? _c('el-cascader', {
    attrs: {
      "expand-trigger": "hover",
      "change-on-select": true,
      "props": _vm.props,
      "options": _vm.organizationList
    },
    on: {
      "change": _vm.fnSelOrgChange
    },
    model: {
      value: (_vm.form.department),
      callback: function($$v) {
        _vm.form.department = $$v
      },
      expression: "form.department"
    }
  }) : [(_vm.currentcourse.length > 0) ? _c('el-input', {
    attrs: {
      "value": _vm.currentcourse[0].org_name,
      "readonly": true
    }
  }) : _vm._e()]], 2), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程全名",
      "prop": "fullname"
    }
  }, [_c('el-input', {
    attrs: {
      "placeholder": "请输入课程全名"
    },
    model: {
      value: (_vm.form.fullname),
      callback: function($$v) {
        _vm.form.fullname = $$v
      },
      expression: "form.fullname"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程简称",
      "prop": "shortname"
    }
  }, [_c('el-input', {
    attrs: {
      "placeholder": "请输入课程简称"
    },
    model: {
      value: (_vm.form.shortname),
      callback: function($$v) {
        _vm.form.shortname = $$v
      },
      expression: "form.shortname"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程编号",
      "prop": "idnumber"
    }
  }, [_c('el-input', {
    attrs: {
      "placeholder": "请输入课程编号"
    },
    model: {
      value: (_vm.form.idnumber),
      callback: function($$v) {
        _vm.form.idnumber = $$v
      },
      expression: "form.idnumber"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程类型",
      "prop": "category"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请选择课程类型"
    },
    model: {
      value: (_vm.form.category),
      callback: function($$v) {
        _vm.form.category = $$v
      },
      expression: "form.category"
    }
  }, _vm._l((_vm.categories), function(item, index) {
    return _c('el-option', {
      key: index,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程课时",
      "prop": "numsections"
    }
  }, [_c('el-input', {
    attrs: {
      "placeholder": "请输入课程课时",
      "type": "number"
    },
    model: {
      value: (_vm.form.numsections),
      callback: function($$v) {
        _vm.form.numsections = $$v
      },
      expression: "form.numsections"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程概要",
      "prop": "summary"
    }
  }, [_c('el-input', {
    attrs: {
      "placeholder": "请输入课程概要",
      "type": "textarea"
    },
    model: {
      value: (_vm.form.summary),
      callback: function($$v) {
        _vm.form.summary = $$v
      },
      expression: "form.summary"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "课程封面"
    }
  }, [(_vm.$route.params.cat === 'edit' && _vm.currentcourse.length > 0 && _vm.currentcourse[0].pic_path) ? [_c('a', {
    staticStyle: {
      "width": "100px",
      "height": "100px",
      "display": "block"
    },
    attrs: {
      "href": _vm.currentcourse[0].pic_path,
      "target": "_blank"
    }
  }, [_c('img', {
    attrs: {
      "src": _vm.currentcourse[0].pic_path,
      "alt": ""
    }
  })])] : _c('el-upload', {
    staticClass: "cover-class-uploader",
    attrs: {
      "action": "",
      "auto-upload": false,
      "show-file-list": false,
      "on-change": _vm.handleCoverChange
    }
  }, [(_vm.imageUrl) ? _c('img', {
    staticClass: "cover-class",
    attrs: {
      "src": _vm.imageUrl
    }
  }) : _c('i', {
    staticClass: "el-icon-plus avatar-uploader-icon"
  })])], 2), _vm._v(" "), _c('el-form-item', [(_vm.$route.params.cat === 'add') ? _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.onSubmitAdd('addCourseForm')
      }
    }
  }, [_vm._v("立即创建")]) : _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.onSubmitEdit('addCourseForm')
      }
    }
  }, [_vm._v("提交修改")]), _vm._v(" "), _c('el-button', {
    on: {
      "click": function($event) {
        _vm.$router.back(-1);
      }
    }
  }, [_vm._v("取消")])], 1)], 1)], 1)])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-67bbd00c", module.exports)
  }
}

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(94)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(96),
  /* template */
  __webpack_require__(97),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libEditChapter.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libEditChapter.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-58ccbd53", Component.options)
  } else {
    hotAPI.reload("data-v-58ccbd53", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(95);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("f71590a4", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-58ccbd53!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libEditChapter.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-58ccbd53!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libEditChapter.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);

// exports


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        return {
            // 课程库编辑课程章节
            currentchapter: null
        };
    },
    created: function created() {
        var thisVue = this;
        this.$root.Bus.$on("sendChapter", function (chapter) {
            window.sessionStorage.setItem('currentChapter', JSON.stringify(chapter));
            thisVue.read(chapter);
        });
    },
    activated: function activated() {
        if (window.sessionStorage.getItem("currentChapter")) {
            this.read();
        } else {
            window.history.back(-1);
        }
    },
    methods: {
        save: function save() {
            var thisVue = this;
            $.formValidator.initConfig({
                formID: "editchapterlib",
                errorFocus: true,
                alertMessage: false,
                onError: function onError(err) {
                    layer.msg(err, { icon: 2, time: 2000 });
                }
            });
            $("#editchaptertitle").formValidator({
                empty: false
            }).regexValidator({
                regExp: "notempty",
                dataType: "enum",
                onError: "课程名称不能为空"
            });
            $("#editchapterperiod").formValidator({
                empty: false
            }).regexValidator({
                regExp: "intege1",
                dataType: "enum",
                onError: "课程课时只能是正整数"
            });
            if ($.formValidator.pageIsValid('1')) {
                var title = $("#editchaptertitle").val().trim();
                var section = $("#editchapterperiod").val().trim();
                var summary = $("#editchapterdes").val().trim();
                var data = {
                    'module': 'service',
                    'controller': 'Course_Sections_Con',
                    'action': 'upSections',
                    'type': 0,
                    'courseid': thisVue.currentchapter.courseid,
                    'id': thisVue.currentchapter.id,
                    'name': title,
                    'section': section,
                    'summary': summary
                };
                $.ajax({
                    url: API_ENV.API_URL,
                    dataType: 'json',
                    type: 'POST',
                    data: data,
                    success: function success(response) {
                        window.utiltool.checkLoginStatus(response.status);
                        if (!response.status) {
                            layer.msg(response.data, { icon: 1, time: 1500 }, function () {
                                history.back(-1);
                            });
                        } else {
                            layer.msg(response.data, { icon: 2, time: 1500 }, function () {
                                window.location.reload();
                            });
                        }
                    },
                    error: function error(err) {
                        console.log('章修改提交失败！', err);
                    }
                });
            }
        },
        read: function read(item) {
            var item = item || JSON.parse(window.sessionStorage.getItem("currentChapter"));
            this.currentchapter = item;
        },
        back: function back() {
            window.history.back(-1);
        }
    },
    mounted: function mounted() {},
    beforeDestroy: function beforeDestroy() {
        this.$root.Bus.$off('sendCourse');
    }
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "content",
    attrs: {
      "id": "add-course"
    }
  }, [_c('div', {
    staticClass: "course-lib"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "add-course-form"
  }, [(_vm.currentchapter) ? [_c('div', {
    attrs: {
      "id": "add-form"
    }
  }, [_c('form', {
    attrs: {
      "id": "editchapterlib"
    }
  }, [_c('p', {
    staticClass: "title"
  }, [_vm._m(1), _vm._v(" "), _c('input', {
    staticClass: "con",
    attrs: {
      "name": "fullname",
      "id": "editchaptertitle",
      "type": "text",
      "autofocus": "",
      "placeholder": "不能为空"
    },
    domProps: {
      "value": _vm.currentchapter.name
    }
  })]), _vm._v(" "), _c('p', {
    staticClass: "period"
  }, [_vm._m(2), _vm._v(" "), _c('input', {
    staticClass: "con",
    attrs: {
      "name": "numsections",
      "id": "editchapterperiod",
      "type": "number",
      "placeholder": "由正整数组成"
    },
    domProps: {
      "value": _vm.currentchapter.section
    }
  })]), _vm._v(" "), _c('p', {
    staticClass: "des clearfix"
  }, [_vm._m(3), _vm._v(" "), _c('textarea', {
    staticClass: "con",
    attrs: {
      "name": "summary",
      "id": "editchapterdes",
      "placeholder": "不能为空"
    }
  }, [_vm._v(_vm._s(_vm.currentchapter.summary))])])])]), _vm._v(" "), _c('div', {
    staticClass: "submit clearfix"
  }, [_c('p', {
    staticClass: "fr"
  }, [_c('router-link', {
    attrs: {
      "to": "/courselib/libchapter"
    }
  }, [_c('span', {
    staticClass: "back"
  }, [_vm._v("返回")])]), _vm._v(" "), _c('span', {
    staticClass: "save",
    on: {
      "click": _vm.save
    }
  }, [_vm._v("更新")])], 1)])] : _vm._e()], 2)])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "classify clearfix"
  }, [_c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0px"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("编辑章节")])])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('span', [_c('i', [_vm._v("*")]), _vm._v("章节标题")])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('span', [_c('i', [_vm._v("*")]), _vm._v("章节课时")])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('span', [_c('i', [_vm._v("*")]), _vm._v("章节概要")])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-58ccbd53", module.exports)
  }
}

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(99)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(101),
  /* template */
  __webpack_require__(107),
  /* scopeId */
  "data-v-7b355032",
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\uploadfile.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] uploadfile.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7b355032", Component.options)
  } else {
    hotAPI.reload("data-v-7b355032", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(100);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("3b52fcc8", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-7b355032&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./uploadfile.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-7b355032&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./uploadfile.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n.start-up[data-v-7b355032] {text-align: center; height: 50px; line-height: 50px; margin-bottom: 20px;\n}\n.up-file-wrap .up-btn[data-v-7b355032]{position: relative; width: 80px; height: 40px; margin-bottom: 10px;\n}\n.up-file-wrap .up-btn .btn-file[data-v-7b355032], .up-file-wrap .up-btn button[data-v-7b355032]{\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 80px;\r\n  height: 40px;\n}\n.up-file-wrap .up-btn .btn-file[data-v-7b355032]{ z-index: 101; opacity: 0.0009;\n}\n.up-file-wrap .up-btn button[data-v-7b355032]{z-index: 100;\n}\n.up-file-wrap .preview li img[data-v-7b355032]{ height: 50px; width: 50px;\n}\r\n", ""]);

// exports


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _upload = __webpack_require__(102);

var _upload2 = _interopRequireDefault(_upload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  data: function data() {
    return {
      msglist: [],
      limit: 5,
      maxFileSize: 1024 * 1024 * 5,
      accept: ['jpg', 'png', 'jpeg', 'gif', 'zip', 'ppt', 'pptx', 'docx', 'doc', 'xlsx', 'xls'],
      fileObj: {},
      fileOldList: [{
        id: '123123123',
        url: 'https://ss0.bdstatic.com/k4oZeXSm1A5BphGlnYG/newmusic/english.png',
        name: 'girl.jpg',
        type: 'img',
        file: null,
        hash: '',
        size: '',
        summary: '描述'
      }],
      newFiles: []
    };
  },

  props: {},
  components: {
    "yk-upload": _upload2.default
  },
  methods: {
    handleSelected: function handleSelected(fileList) {
      console.log('fileList', fileList);
      this.newFiles = fileList.filter(function (item) {
        return item.file ? true : false;
      });
    },
    handleDeleteOld: function handleDeleteOld(fileId) {
      console.log('删除历史文件', fileId);
    },

    // 开始上传
    startUpload: function startUpload() {
      var This = this;
      if (this.fileObj.files) {
        this.newFiles = this.fileObj.files.filter(function (item) {
          return item.file ? true : false;
        });
        console.log('this.newFiles', this.newFiles);
        if (this.newFiles.length) {
          this.msglist = this.newFiles.map(function (item) {
            return {
              file_hash: item.file.hash,
              summary: item.summary
            };
          });
          var params = {
            module: 'service',
            controller: 'Courseware_Con',
            action: 'addCourseware',
            course: this.$route.query.d,
            course_sections: '',
            flag: '0',
            upload_files_hashs: this.newFiles.map(function (item) {
              return item.file.hash;
            }),
            msglist: this.msglist
          };
          var formData = new FormData();
          for (var key in params) {
            formData.append(key, params[key]);
          }
          for (var i = 0; i < this.newFiles.length; i++) {
            formData.append('files[]', this.newFiles[i].file);
          }
          $.ajax({
            url: API_ENV.API_URL,
            type: 'POST',
            data: formData,
            dataType: 'json',
            cache: false,
            processData: false,
            contentType: false,
            success: function success(resData) {
              console.log('resData', resData);
              if (resData.status == 0) {
                This.$message({ type: 'success', message: resData.data ? resData.data : '课件上传成功！' });
              } else {
                This.$message({ type: 'info', message: resData.data ? resData.data : '课件上传失败！' });
              }
            },
            error: function error(_error) {
              This.$message({ type: 'error', message: '课件上传失败！' });
            }
          });
        } else {
          this.$message({ type: 'info', message: '请先添加课件！' });
        }
      } else {
        this.$message({ type: 'info', message: '请先添加课件！' });
      }
    }
  }
}; //
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(103)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(105),
  /* template */
  __webpack_require__(106),
  /* scopeId */
  "data-v-1bd837b6",
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\upload.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] upload.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-1bd837b6", Component.options)
  } else {
    hotAPI.reload("data-v-1bd837b6", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(104);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("776ddbba", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-1bd837b6&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./upload.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-1bd837b6&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./upload.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n.yk-upload .yk-btn[data-v-1bd837b6] {\r\n  display: inline-block;\r\n  line-height: 1;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  border: 1px solid #dcdfe6;\r\n  -webkit-appearance: none;\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n  outline: none;\r\n  margin: 0;\r\n  transition: .1s;\r\n  font-weight: 500;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n  padding: 10px 15px;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  color: #fff;\r\n  background-color: #409eff;\r\n  border-color: #409eff;\r\n  font-size: 12px;\n}\n.yk-upload .yk-upload-btn[data-v-1bd837b6] {\r\n  position: relative;\r\n  height: 40px;\n}\n.yk-upload .yk-upload-btn .btn-file[data-v-1bd837b6] {\r\n  position: absolute;\r\n  z-index: 1;\r\n  opacity: 0;\r\n  width: 80px;\r\n  display: block;\r\n  height: 34px;\r\n  cursor: pointer;\n}\n.yk-upload .yk-upload-btn .btn-file:hover + .yk-btn[data-v-1bd837b6] {\r\n  background: #66b1ff;\r\n  border-color: #66b1ff;\r\n  color: #fff;\n}\n.yk-upload .yk-upload-btn .yk-btn[data-v-1bd837b6] {\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\n}\n.yk-upload .yk-preview li[data-v-1bd837b6] {\r\n  overflow: hidden;\r\n  z-index: 0;\r\n  background-color: #fff;\r\n  border: 1px solid #c0ccda;\r\n  border-radius: 6px;\r\n  -webkit-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  margin-top: 10px;\r\n  padding: 10px 10px 10px 90px;\r\n  height: 92px;\r\n  position: relative;\r\n  transition: all 0.3s ease-out;\n}\n.yk-upload .yk-preview li[data-v-1bd837b6]:hover {\r\n  color: #13ce66;\n}\n.yk-upload .yk-preview li .yk-picture-img[data-v-1bd837b6] {\r\n  vertical-align: middle;\r\n  display: inline-block;\r\n  width: 70px;\r\n  height: 70px;\r\n  float: left;\r\n  position: relative;\r\n  z-index: 1;\r\n  margin-left: -80px;\r\n  text-align: center;\r\n  line-height: 70px;\r\n  font-size: 50px;\n}\n.yk-upload .yk-preview li .yk-file-name[data-v-1bd837b6] {\r\n  line-height: 70px;\r\n  float: left;\r\n  width: 200px;\n}\n.yk-upload .yk-preview li .yk-upload-list-status[data-v-1bd837b6] {\r\n  position: absolute;\r\n  right: -17px;\r\n  top: -7px;\r\n  width: 46px;\r\n  height: 26px;\r\n  cursor: pointer;\n}\n.yk-upload .yk-preview li .yk-upload-list-status.label-success[data-v-1bd837b6] {\r\n  background: #13ce66;\r\n  text-align: center;\r\n  -webkit-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n  -webkit-box-shadow: 0 1px 1px #ccc;\r\n  box-shadow: 0 1px 1px #ccc;\n}\n.yk-upload .yk-preview li .yk-upload-list-status.label-success i[data-v-1bd837b6] {\r\n  color: #fff;\r\n  font-size: 12px;\r\n  margin-top: 12px;\r\n  -webkit-transform: rotate(-45deg);\r\n  transform: rotate(-45deg);\n}\n.yk-upload .yk-preview li .yk-upload-list-status.label-success i[data-v-1bd837b6]::before {content: \"\\E611\";\n}\n.yk-upload .yk-preview li .yk-upload-list-status.label-ready[data-v-1bd837b6] {text-align: center;\n}\n.yk-upload .yk-preview li .yk-upload-list-status.label-ready i[data-v-1bd837b6] {\r\n  color: #606266;\r\n  font-size: 12px;\r\n  margin-top: 12px;\r\n  margin-right: 12px;\n}\n.yk-upload .yk-preview li .yk-upload-list-status.label-ready i[data-v-1bd837b6]::before {content: \"\\E60F\";\n}\n.yk-upload .yk-preview li .yk-summary[data-v-1bd837b6] {\r\n  margin-top: 10px;\r\n  margin-left: 20px;\r\n  resize: vertical;\r\n  padding: 5px 15px;\r\n  line-height: 1.5;\r\n  box-sizing: border-box;\r\n  width: 40%;\r\n  font-size: inherit;\r\n  color: #606266;\r\n  background-color: #fff;\r\n  background-image: none;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n.yk-upload .yk-preview li .yk-summary[data-v-1bd837b6]:focus {outline: none;border-color: #409eff;\n}\n.yk-upload .fade-enter-active[data-v-1bd837b6] {transition: all .3s ease;\n}\n.yk-upload .fade-leave-active[data-v-1bd837b6] { transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);\n}\n.yk-upload .fade-enter[data-v-1bd837b6], .yk-upload .fade-leave-active[data-v-1bd837b6] {padding-top: 20px; opacity: 0;\n}\r\n", ""]);

// exports


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/*
  fileList: 文件对象数组，返回的结果对象
  fileFilter：上传文件原始数组

  // 可传参数
    fileOldList: 历史文件数组
    multiple: 是否多文件上传， 默认true
    accept: 允许文件格式，文件后缀的数组
    limit: 允许文件个数，数字类型 默认-1(不限个数)个
    maxFileSize：允许文件大小，单位字节，默认1024*1024
    errorMsg: 错误提示内容，

    onExceed：文件个数超出钩子
    onSizeError：文件大小不符钩子
    onDeleteNew：新添加的文件删除钩子
    object：文件列表所属对象
   
  // 必传参数
    onSelect：文件选择成功钩子，参数fileList
    onDeleteOld：历史文件删除钩子，参数文件id


*/
exports.default = {
  data: function data() {
    return {
      fileList: [].concat(this.fileOldList),
      fileFilter: []
    };
  },

  props: {
    fileOldList: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    multiple: {
      type: Boolean,
      default: true
    },
    accept: {
      type: Array,
      default: function _default() {
        return ['jpg', 'png', 'jpeg', 'gif'];
      }
    },
    limit: {
      type: Number,
      default: -1
    },
    maxFileSize: {
      type: Number,
      default: 1024 * 1024
    },
    errorMsg: {
      type: Object,
      default: function _default() {
        return {
          fileSizeErr: '文件大小超出约束范围',
          fileNumErr: '文件个数超出允许范围',
          fileTypeErr: '文件格式不被允许'
        };
      }
    },
    onExceed: {
      type: Function,
      default: function _default(num) {
        this.$notify({
          title: '文件数量超出',
          message: '\u6DFB\u52A0\u6587\u4EF6\u4E2A\u6570' + num + ' - \u5141\u8BB8\u6587\u4EF6\u4E2A\u6570' + this.limit,
          duration: 3000
        });
      }
    },
    onSizeError: {
      type: Function,
      default: function _default(file, msg) {
        this.$notify({
          title: '文件大小不符',
          message: '\u6587\u4EF6\u5927\u5C0F\u4E0D\u8D85\u8FC7' + this.formatFileSize(this.maxFileSize) + ' - ' + file.name + '(' + this.formatFileSize(file.size) + ')',
          duration: 3000
        });
      }
    },
    onTypeError: {
      type: Function,
      default: function _default(file, msg) {
        this.$notify({
          title: '文件格式不符',
          message: '\u4E0D\u7B26\u5408\u6587\u4EF6\uFF1A' + file.name + ' - (' + this.accept.join('|') + ')',
          duration: 3000
        });
      }
    },
    onSelect: {
      type: Function
    },
    onDeleteOld: {
      type: Function
    },
    onDeleteNew: {
      type: Function,
      default: function _default(file) {
        this.$notify({
          title: '文件删除提示',
          message: '\u5220\u9664\u6587\u4EF6 - ' + file.name,
          duration: 3000
        });
      }
    },
    object: {
      type: Object,
      default: function _default() {
        return {};
      }
    }
  },
  methods: {
    // 文件控件change事件处理函数
    handleChange: function handleChange(e) {
      var files = e.target.files || e.dataTransfer.files;
      this.fileFilter = this.fileFilter.concat(this.filter(files));
      this.funDealFiles();
    },
    funDealFiles: function funDealFiles() {
      var self = this;
      this.fileList = this.fileList.concat(this.fileFilter.map(function (file) {
        self.getFileMd5Hash(file);
        return {
          status: 'ready',
          url: self.getObjectURL(file),
          name: file.name,
          file: file,
          type: function () {
            var typename = file.name.substring(file.name.lastIndexOf(".") + 1).toLowerCase();
            var arr = ['jpg', 'png', 'jpeg', 'gif'];
            return new RegExp(',' + typename + ',').test(',' + arr.join() + ',') ? 'img' : 'doc';
          }(),
          // hash: file.hash,
          size: self.formatFileSize(file.size),
          summary: ''
        };
      }));
      this.onSelect(this.fileList);
      this.object.files = this.fileList;
      this.fileFilter = [];
    },

    // 文件规则过滤
    filter: function filter(files) {
      var self = this;
      var arr = [];
      if (this.limit != -1 && (files.length > this.limit || files.length + this.fileList.length > this.limit)) {
        // 文件允许上传个数受限
        this.onExceed(files.length + this.fileList.length, this.errorMsg.fileNumErr);
      } else {
        for (var i = 0, file; file = files[i]; i++) {
          console.log(123123);
          if (file.size > self.maxFileSize) {
            self.onSizeError(file, self.errorMsg.fileSizeErr);
          } else {
            if (self.checkFileType(file.name)) {
              self.onTypeError(file, self.errorMsg.fileTypeErr);
            } else {
              arr.push(file);
            }
          }
        }
      }
      return arr;
    },

    // 检查文件格式
    checkFileType: function checkFileType(fileName) {
      var type = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
      return new RegExp(',' + type + ',').test(',' + this.accept.join() + ',') ? false : true;
    },

    // 获取文件本地预览地址
    getObjectURL: function getObjectURL(file) {
      var url = null;
      if (window.createObjectURL != undefined) {
        // basic
        url = window.createObjectURL(file);
      } else if (window.URL) {
        // mozilla(firefox)
        url = window.URL.createObjectURL(file);
      } else if (window.webkitURL) {
        // webkit or chrome
        url = window.webkitURL.createObjectURL(file);
      }
      return url;
    },

    // 文件大小格式化
    formatFileSize: function formatFileSize(bytes) {
      if (typeof bytes !== 'number') {
        return '';
      }
      if (bytes >= 1000000000) {
        return (bytes / 1000000000).toFixed(2) + ' GB';
      }
      if (bytes >= 1000000) {
        return (bytes / 1000000).toFixed(2) + ' MB';
      }
      return (bytes / 1000).toFixed(2) + ' KB';
    },

    // 计算问阿金md5hash值
    getFileMd5Hash: function getFileMd5Hash(file) {
      var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,
          chunkSize = 2097152,
          chunks = Math.ceil(file.size / chunkSize),
          currentChunk = 0,
          spark = new SparkMD5.ArrayBuffer(),
          fileReader = new FileReader();

      fileReader.onload = function (e) {
        spark.append(e.target.result);
        currentChunk++;
        if (currentChunk < chunks) {
          loadNext();
        } else {
          file.hash = spark.end();
        }
      };

      fileReader.onerror = function () {
        return false;
      };

      function loadNext() {
        var start = currentChunk * chunkSize,
            end = start + chunkSize >= file.size ? file.size : start + chunkSize;

        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));
      }
      loadNext();
    },

    // 删除新添加的文件
    handleDeleteNew: function handleDeleteNew(file) {
      this.fileList = this.fileList.filter(function (item) {
        return item.file && file === item.file ? false : true;
      });
      this.fileFilter = this.fileFilter.filter(function (item) {
        return item === file ? false : true;
      });
      this.object.files = this.fileList;
      this.onDeleteNew(file);
    },

    // 删除已上传的文件，通过文件id
    handleDeleteOld: function handleDeleteOld(fileId) {
      this.fileList = this.fileList.filter(function (file) {
        return file.id && file.id == fileId ? false : true;
      });
      this.onDeleteOld(fileId);
    }
  }
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "yk-upload"
  }, [_c('div', {
    staticClass: "yk-upload-btn"
  }, [_c('input', {
    staticClass: "btn-file",
    attrs: {
      "type": "file",
      "multiple": _vm.multiple
    },
    on: {
      "change": _vm.handleChange
    }
  }), _vm._v(" "), _vm._m(0)]), _vm._v(" "), _c('div', {
    staticClass: "yk-preview"
  }, [_c('ul', [_c('transition-group', {
    attrs: {
      "name": "fade"
    }
  }, _vm._l((_vm.fileList), function(item, index) {
    return _c('li', {
      key: index
    }, [(item.type === 'img') ? _c('img', {
      staticClass: "yk-picture-img",
      attrs: {
        "src": item.url,
        "alt": ""
      }
    }) : _c('i', {
      staticClass: "el-icon-document yk-picture-img"
    }), _vm._v(" "), _c('span', {
      staticClass: "yk-file-name"
    }, [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c('textarea', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (item.summary),
        expression: "item.summary"
      }],
      staticClass: "yk-summary",
      domProps: {
        "value": (item.summary)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          item.summary = $event.target.value
        }
      }
    }), _vm._v(" "), (item.status == 'ready') ? _c('label', {
      staticClass: "yk-upload-list-status label-ready",
      on: {
        "click": function($event) {
          _vm.handleDeleteNew(item.file)
        }
      }
    }, [_c('i', {
      staticClass: "el-icon- yk-icon-success"
    })]) : _c('label', {
      staticClass: "yk-upload-list-status label-success",
      on: {
        "click": function($event) {
          _vm.handleDeleteOld(item.id)
        }
      }
    }, [_c('i', {
      staticClass: "el-icon- yk-icon-success"
    })])])
  }))], 1)])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('button', {
    staticClass: "yk-btn"
  }, [_c('i', {
    staticClass: "el-icon-circle-plus"
  }), _vm._v(" 添加文件")])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-1bd837b6", module.exports)
  }
}

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "up-file-wrap"
  }, [_c('div', {
    staticClass: "classify clearfix"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "fr"
  }, [_c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.$router.push({
          path: '/'
        })
      }
    }
  }, [_vm._v("返回")])], 1)]), _vm._v(" "), _c('div', {
    staticClass: "start-up"
  }, [_c('el-button', {
    attrs: {
      "type": "primary",
      "round": ""
    },
    on: {
      "click": _vm.startUpload
    }
  }, [_c('i', {
    staticClass: "el-icon-upload"
  }), _vm._v(" 开始上传")])], 1), _vm._v(" "), _c('yk-upload', {
    attrs: {
      "object": _vm.fileObj,
      "limit": _vm.limit,
      "accept": _vm.accept,
      "file-old-list": _vm.fileOldList,
      "max-file-size": _vm.maxFileSize,
      "on-select": _vm.handleSelected,
      "on-delete-old": _vm.handleDeleteOld
    }
  })], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("课件管理")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7b355032", module.exports)
  }
}

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(109)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(111),
  /* template */
  __webpack_require__(112),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\tasklist.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] tasklist.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-172fb118", Component.options)
  } else {
    hotAPI.reload("data-v-172fb118", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(110);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("8d664014", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-172fb118!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./tasklist.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-172fb118!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./tasklist.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);

// exports


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        var thisVue = this;
        return {
            courseid: thisVue.$route.query.td, // 课程id
            homeworklist: { // 课程 作业 数据
                taskdata: new Array()
            },
            selitem: new Array(), // 保存选中的数据
            page: 1, // 当前页码，默认第一页
            allpage: null, // 总页码,
            rows: 4,
            currentOrg: '', // 当前机构的id 用于翻页的请求
            max_page: 5 //最大数字显示
        };
    },
    mounted: function mounted() {
        this.$message({
            type: 'info',
            message: '该模块正在完善中！',
            callback: function callback() {
                this.$router.go(-1);
            }
        });
        // this.requestHomework(this.page, this.rows);
    },
    activated: function activated() {},
    methods: {
        requestHomework: function requestHomework(page, rows) {
            // 请求课程数据 请求作业数据
            var thisVue = this;
            if (this.courseid) {
                $.ajax({
                    url: API_ENV.API_URL,
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        module: 'Service',
                        controller: 'Assignment_Con',
                        action: 'homeworkList',
                        id: thisVue.courseid,
                        section: thisVue.$route.query.sd || '', // 章节id
                        row: rows,
                        page: page
                    },
                    success: function success(response) {
                        console.log('课程库作业猎豹', response);
                        window.utiltool.checkLoginStatus(response.status);
                        if (!response.status) {
                            // thisVue.allpage = response.data.last_page;
                            thisVue.allpage = 10, thisVue.homeworklist = {
                                courseid: response.data.courseid,
                                coursename: response.data.coursename,
                                total: response.data.total,
                                taskdata: response.data.data
                            };
                        } else {
                            window.utiltool.dealErr({
                                level: 2,
                                msg: response.data
                            });
                        }
                    },
                    error: function error(err) {
                        window.utiltool.dealErr({
                            level: 1,
                            msg: '按机构请求类型数据报错'
                        });
                    }
                });
            } else {
                this.$router.go(-1);
            }
        },
        fnSelOne: function fnSelOne(event, task) {
            // 选择一条数据
            $('.mod-chapters .chapter span.selitem').removeClass('checked');
            $(event.path[0]).find('.selitem').addClass('checked');
            $(event.path[0]).addClass('hover').siblings().removeClass('hover');
            this.selitem = new Array();
            this.selitem.push(task);
        },
        fnSelOnes: function fnSelOnes(event) {
            // 复选框选中多个
            $(event.path[0]).toggleClass('checked');
            var li = $(event.path[1]);
            if ($(event.path[0]).hasClass('checked')) {
                li.addClass('hover');
            } else {
                li.removeClass('hover');
            }
            this.fnGetAllSel();
        },
        fnSelAll: function fnSelAll(event) {
            // 全选或者全不选
            var li = $(".mod-chapters .chapter .chapter-list li");
            $(event.path[0]).toggleClass('checked');
            if ($(event.path[0]).hasClass('checked')) {
                li.addClass('hover');
                li.find('.selitem').addClass('checked');
            } else {
                li.removeClass('hover');
                li.find('.selitem').removeClass('checked');
            }
            this.fnGetAllSel();
        },
        fnGetAllSel: function fnGetAllSel() {
            // 提取选中的数据
            var thisVue = this;
            var li = $(".mod-chapters .chapter .chapter-list li");
            var arr = [];
            for (var i = li.length - 1; i >= 0; i--) {
                if (li.eq(i).hasClass('hover')) {
                    var id = li.eq(i).data('id');
                    for (var j = thisVue.taskdata.length - 1; j >= 0; j--) {
                        if (thisVue.taskdata[j].id == id) {
                            arr.push(thisVue.taskdata[j]);
                            break;
                        }
                    }
                }
            }
            thisVue.selitem = arr;
        },
        getPageHtml: function getPageHtml() {
            // 生成翻页html结构 最多显示max_page个页码
            // $(".course-lib .course-paging ul").html('');// 清除已有内容
            var thisVue = this;
            liAppendDom(thisVue.allpage, thisVue.max_page, $(".course-paging ul.clearfix"), $(".course-paging ul.pagesign span.num[name = all]"), function () {
                $(".course-paging ul.clearfix").on('click', '.num, .prev, .next, .first_page, .last_page', function () {
                    var parent = $(this).parent();
                    var li = parent.find("li");
                    var linum = parent.find("li.num");
                    var limore = parent.find("li.more");
                    var liprev = parent.find("li.prev");
                    if ($(this).hasClass('num')) {
                        var index = Number($(this).find("a").text()); //点击的数字
                        if (index !== thisVue.page) {
                            thisVue.page = index;
                        } else {
                            return;
                        }
                    } else if ($(this).hasClass("prev") || $(this).hasClass("next") || $(this).hasClass("first_page") || $(this).hasClass("last_page")) {
                        var classname = $(this).attr('class');
                        var index = 1;
                        if ($(this).hasClass("first_page")) {
                            index = 1;
                        } else if ($(this).hasClass("last_page")) {
                            index = thisVue.allpage;
                        } else {
                            index = prevNext(classname, thisVue.page, thisVue.allpage);
                        }
                        if (index !== thisVue.page) {
                            thisVue.page = index;
                        } else {
                            return;
                        }
                    }
                    $(this).addClass("hover").siblings().removeClass("hover");
                    alterPage(index, thisVue.allpage, thisVue.max_page, liprev, linum, limore);
                    addHover(parent, index);
                    $(".course-paging ul.pagesign span.num[name = current]").text(" " + index + " ");
                    showHide(thisVue.page, li, thisVue.allpage);
                    thisVue.requestHomework(thisVue.page, thisVue.rows);
                });
            });
        },
        fnDelhomework: function fnDelhomework() {
            // 删除作业
            var thisVue = this;
            var data = function () {
                var arr = [];
                for (var i = 0, item; item = thisVue.selitem[i]; i++) {
                    arr.push({
                        id: item.id,
                        course: thisVue.courseid,
                        section: item.sectionid
                    });
                }
                return arr;
            }();
            console.log('删除的数据', data);
        },
        fnBack: function fnBack() {
            // 返回
            this.$router.go(-1);
        }
    },
    watch: {
        allpage: function allpage() {
            // 页码发生变化时，从新生成页码
            var ThisVue = this;
            $(".course-paging ul.clearfix").off('click', '.num, .prev, .next, .first_page, .last_page').find('li').remove();
            ThisVue.$nextTick(function () {
                ThisVue.getPageHtml();
            });
        }
    }
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    attrs: {
      "id": "lib-taskes"
    }
  }, [_c('div', {
    staticClass: "classify clearfix"
  }, [_vm._m(0), _vm._v(" "), (_vm.homeworklist) ? _c('div', {
    staticClass: "fr"
  }, [_c('span', [_vm._v(_vm._s(_vm.homeworklist.coursename) + "-" + _vm._s(_vm.homeworklist.total))])]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "task-con"
  }, [_c('div', {
    staticClass: "container"
  }, [_c('div', {
    staticClass: "course-top"
  }, [_c('div', {
    staticClass: "operation-bar",
    staticStyle: {
      "border-top": "none"
    }
  }, [_c('div', {
    staticClass: "btn-arr"
  }, [_c('a', {
    staticClass: "btn-item back",
    attrs: {
      "href": "javascript: void(0);"
    },
    on: {
      "click": function($event) {
        _vm.fnBack()
      }
    }
  }, [_vm._v("返回")]), _vm._v(" "), _c('router-link', {
    staticClass: "btn-item add",
    attrs: {
      "to": {
        path: 'libtaskcon',
        query: {
          cd: _vm.courseid
        }
      }
    }
  }, [_vm._v("添加")]), _vm._v(" "), (_vm.selitem.length >= 1) ? _c('a', {
    staticClass: "btn-item del",
    attrs: {
      "href": "javascript: void(0);"
    },
    on: {
      "click": function($event) {
        _vm.fnDelhomework()
      }
    }
  }, [_vm._v("删除")]) : _vm._e()], 1)])]), _vm._v(" "), _c('div', {
    staticClass: "course-list"
  }, [_c('div', {
    staticClass: "mod-chapters"
  }, [_c('div', {
    staticClass: "chapter"
  }, [_c('h3', [_c('span', {
    staticClass: "selitem",
    on: {
      "click": function($event) {
        _vm.fnSelAll($event)
      }
    }
  }), _vm._v(" "), _c('strong', {
    staticClass: "chapter-title"
  }, [_vm._v("作业名称")]), _vm._v(" "), _c('strong', {
    staticClass: "chapter-other1"
  }, [_vm._v("创建者")]), _vm._v(" "), _c('strong', {
    staticClass: "chapter other"
  }, [_vm._v("创建时间")]), _vm._v(" "), _c('strong', {
    staticClass: "chapter details"
  }, [_vm._v("查看详情")])]), _vm._v(" "), (_vm.homeworklist.taskdata.length > 0) ? [_c('ul', {
    staticClass: "chapter-list fx"
  }, _vm._l((_vm.homeworklist.taskdata), function(item) {
    return _c('li', {
      attrs: {
        "data-id": item.id
      },
      on: {
        "click": function($event) {
          _vm.fnSelOne($event, item)
        }
      }
    }, [_c('span', {
      staticClass: "selitem",
      on: {
        "click": function($event) {
          $event.stopPropagation();
          _vm.fnSelOnes($event)
        }
      }
    }), _vm._v(" "), _c('span', {
      staticClass: "task-title"
    }, [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c('span', {
      staticClass: "task other"
    }, [_vm._v(_vm._s(item.author))]), _vm._v(" "), _c('span', {
      staticClass: "task-other"
    }, [_vm._v(_vm._s(item.createtime))]), _vm._v(" "), _c('router-link', {
      attrs: {
        "tag": "span",
        "to": {
          path: 'libreadtask',
          query: {
            cd: _vm.courseid,
            sd: item.sectionid,
            td: item.id,
            tp: 'edit'
          }
        }
      }
    }, [_vm._v("编辑")]), _vm._v(" "), _c('router-link', {
      staticClass: "btn-operation",
      attrs: {
        "tag": "span",
        "to": {
          path: 'libreadtask',
          query: {
            cd: _vm.courseid,
            sd: item.sectionid,
            td: item.id,
            tp: 'show'
          }
        }
      }
    }, [_vm._v("查看内容")])], 1)
  }))] : _c('p', {
    staticStyle: {
      "text-align": "center"
    }
  }, [_vm._v("该课程目前还没有作业！")])], 2)])])])]), _vm._v(" "), _vm._m(1)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("课程作业")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "paging course-paging clearfix"
  }, [_c('ul', {
    staticClass: "pagesign"
  }, [_c('li', {
    staticClass: "sign"
  }, [_vm._v("当前第"), _c('span', {
    staticClass: "num",
    attrs: {
      "name": "current"
    }
  }, [_vm._v(" 1 ")]), _vm._v("页，共"), _c('span', {
    staticClass: "num",
    attrs: {
      "name": "all"
    }
  }, [_vm._v(" 1 ")]), _vm._v("页")])]), _vm._v(" "), _c('ul', {
    staticClass: "clearfix"
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-172fb118", module.exports)
  }
}

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(114)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(116),
  /* template */
  __webpack_require__(117),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libtask.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libtask.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-62a101b6", Component.options)
  } else {
    hotAPI.reload("data-v-62a101b6", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(115);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("0b6bc760", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-62a101b6!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libtask.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-62a101b6!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libtask.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n.layui-form{\n    margin: 20px auto;\n}\n.layui-field-box{\n    padding: 10px 0;\n}\n", ""]);

// exports


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        return {
            course: {
                id: '1231231',
                name: '课程名'
            },
            chapter: [{
                id: '1231123123',
                name: '第一章'
            }, {
                id: '12312153123',
                name: '第二章'
            }, {
                id: '12316733123',
                name: '第三章'
            }, {
                id: '1231212323',
                name: '第四章'
            }, {
                id: '123167123',
                name: '第五章'
            }],
            knob: [{
                id: '1231',
                name: '第一节'
            }, {
                id: '342',
                name: '第二节'
            }, {
                id: '12316733234123',
                name: '第三节'
            }, {
                id: '123121235356323',
                name: '第四节'
            }, {
                id: '1231',
                name: '第五节'
            }],
            homeworkupfile: {
                listdata: new Array(), // 列表循环显示的数据
                files: new Array(), // 文件列表
                msglist: new Array() // 文件描述列表
            }, // 保存上传的文件
            answerupfile: {
                listdata: new Array(), // 列表循环显示的数据
                files: new Array(), // 文件列表
                msglist: new Array() // 文件描述列表
            },
            answernum: 1 // 答案的个数
        };
    },
    activated: function activated() {
        var thisVue = this;
        layui.use('form', function () {
            var form = layui.form;

            form.on('select(section)', function (data) {
                console.log('章节的下拉选项数据', data);
            });
            form.on('submit(submit)', function (data) {
                console.log(data);
                thisVue.fnSubmit();
                return false;
            });
            form.render();
        });
    },
    mounted: function mounted() {
        layui.use('form', function () {
            var form = layui.form;
            form.render();
        });
        this.fnGetEdit("#editor-homework-bar", "#editor-homework-con");
        this.fnGetEdit("#editor-answer-bar1", "#editor-answer-con1");
    },
    computed: {},
    filters: {},
    methods: {
        fnBack: function fnBack() {
            this.$router.go(-1);
        },
        fnGetEdit: function fnGetEdit(bar, con) {
            var Editor = window.wangEditor;
            var editor = new Editor(bar, con);
            // 通过 url 参数配置 debug 模式。url 中带有 wangeditor_debug_mode=1 才会开启 debug 模式
            editor.customConfig.debug = location.href.indexOf('wangeditor_debug_mode=1') > 0;
            editor.customConfig.uploadImgShowBase64 = true;
            editor.customConfig.zIndex = 100;
            editor.create();
        },
        fnListenerUpFile: function fnListenerUpFile(event, upfile, sign) {
            // 监听文件上传之添加文件
            var thisVue = this;
            var filelist = event.target.files;
            var filtered = window.utiltool.dealFileFilter({
                filtes: filelist,
                sign: sign,
                msglist: upfile.msglist
            });
            for (var i = 0; i < filtered.length; i++) {
                upfile.files.push(filtered[i].file);
                upfile.listdata.push({
                    localurl: window.utiltool.funGetUrlByType(filtered[i].file, filtered[i].type),
                    name: filtered[i].file.name,
                    size: filtered[i].formatFileSize
                });
            }
        },
        fnDelFile: function fnDelFile(event, index, upfile) {
            // 移除添加的文件
            console.log(event, index);
            upfile.listdata.removeByValue(upfile.listdata[index]);
            upfile.files.removeByValue(upfile.files[index]);
            upfile.msglist.removeByValue(upfile.msglist[index]);
        },
        fnAddSummaryToFile: function fnAddSummaryToFile(event, index, upfile) {
            // 给上传的文件添加描述
            upfile.msglist[index].summary = $(event.path[0]).val();
        },
        fnSubmit: function fnSubmit() {
            // 提交添加的作业
            var thisVue = this;
            console.log('thisVue.$refs', thisVue.$refs);
            var homeworkcon = thisVue.$refs.homeworkcon.children[0].innerHTML;
            // 作业内容不能为空
            if (new RegExp(regexEnum.notempty).test(thisVue.$refs.homeworkcon.children[0].innerText)) {
                var data = {
                    courseid: thisVue.course.id,
                    homework: {
                        name: thisVue.$refs.name.value,
                        sectionid: thisVue.$refs.knob.value ? thisVue.$refs.knob.value : thisVue.$refs.chapter.value,
                        type: thisVue.$refs.type.value,
                        explain: thisVue.$refs.homeworkcon.children[0].innerHTML
                    },
                    answer: function () {
                        var arr = new Array();
                        for (var i = 0; i < thisVue.answernum; i++) {
                            var answercon = 'answercon' + (i + 1);
                            var attention = 'attention' + (i + 1);
                            arr.push({
                                answer: thisVue.$refs[answercon][0].children[0].innerHTML,
                                attention: thisVue.$refs[attention][0].value
                            });
                        }
                        return arr;
                    }(),
                    files: thisVue.homeworkupfile.files.concat(thisVue.answerupfile.files),
                    msglist: thisVue.homeworkupfile.msglist.concat(thisVue.answerupfile.msglist)
                };
                console.log(data);
            } else {
                layer.msg('作业内容不能为空', { icon: 5, time: 2000 }, function () {
                    // thisVue.$refs.homeworkcon.children[0].onfocus();
                });
            }
        },
        fnAddAnswer: function fnAddAnswer() {
            // 继续添加作业答案
            var thisVue = this;
            thisVue.answernum++;
            this.$nextTick(function () {
                thisVue.fnGetEdit("#editor-answer-bar" + thisVue.answernum, "#editor-answer-con" + thisVue.answernum);
            });
        },
        fnRemoveAnswer: function fnRemoveAnswer() {
            // 移去作业答案答案
            this.answernum--;
            if (this.answernum <= 1) {
                this.answernum = 1;
            }
        }

    }
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    attrs: {
      "id": "libtask"
    }
  }, [_c('div', {
    staticClass: "classify clearfix"
  }, [_vm._m(0), _vm._v(" "), (_vm.course) ? _c('div', {
    staticClass: "fr"
  }, [_c('span', [_vm._v(_vm._s(_vm.course.name))])]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "layui-form"
  }, [_c('fieldset', {
    staticClass: "layui-elem-field"
  }, [_c('legend', [_vm._v("作业题目")]), _vm._v(" "), _c('div', {
    staticClass: "layui-field-box"
  }, [_c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业位置")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('select', {
    ref: "chapter",
    attrs: {
      "name": "chapter",
      "lay-verify": "required",
      "lay-filter": "chapter"
    }
  }, [_c('option', {
    attrs: {
      "value": "",
      "selected": ""
    }
  }, [_vm._v("选择章节")]), _vm._v(" "), _vm._l((_vm.chapter), function(item) {
    return _c('option', {
      domProps: {
        "value": item.id
      }
    }, [_vm._v(_vm._s(item.name))])
  })], 2)]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('select', {
    ref: "knob",
    attrs: {
      "name": "knob",
      "lay-filter": "knob"
    }
  }, [_c('option', {
    attrs: {
      "value": "",
      "selected": ""
    }
  }, [_vm._v("选择小节")]), _vm._v(" "), _vm._l((_vm.knob), function(item) {
    return _c('option', {
      domProps: {
        "value": item.id
      }
    }, [_vm._v(_vm._s(item.name))])
  })], 2)])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业类型")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('select', {
    ref: "type",
    attrs: {
      "name": "type",
      "lay-verify": "required"
    }
  }, [_c('option', {
    attrs: {
      "value": ""
    }
  }, [_vm._v("请选择类型")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "singlechoice",
      "disabled": ""
    }
  }, [_vm._v("单选题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "multiplechoice",
      "disabled": ""
    }
  }, [_vm._v("多选题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "shortanswer",
      "disabled": ""
    }
  }, [_vm._v("填空题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "truefalse",
      "disabled": ""
    }
  }, [_vm._v("判断题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "match",
      "disabled": ""
    }
  }, [_vm._v("匹配题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "essay",
      "selected": ""
    }
  }, [_vm._v("简答题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "comprehensive",
      "disabled": ""
    }
  }, [_vm._v("综合题")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "readingcomprehension",
      "disabled": ""
    }
  }, [_vm._v("阅读理解")])])])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业名称")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-block"
  }, [_c('input', {
    ref: "name",
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "lay-verify": "required",
      "autocomplete": "off",
      "placeholder": "请输入名称"
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item layui-form-text"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业内容")]), _vm._v(" "), _c('div', {
    staticClass: "editor",
    attrs: {
      "id": "editor-homework"
    }
  }, [_c('div', {
    staticClass: "editor-bar",
    attrs: {
      "id": "editor-homework-bar"
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "editor-file clearfix",
    attrs: {
      "id": "editor-homework-file"
    }
  }, [_c('div', {
    staticClass: "file-btn"
  }, [_c('input', {
    attrs: {
      "type": "file",
      "multiple": "",
      "name": "files-homework"
    },
    on: {
      "change": function($event) {
        _vm.fnListenerUpFile($event, _vm.homeworkupfile, 'homeworkupfile')
      }
    }
  }), _vm._v(" "), _vm._m(1)]), _vm._v(" "), _c('div', {
    staticClass: "file-list"
  }, [(_vm.homeworkupfile.listdata.length > 0) ? _c('table', {
    staticClass: "table"
  }, _vm._l((_vm.homeworkupfile.listdata), function(item, index) {
    return _c('tr', [_c('td', [_c('div', {
      attrs: {
        "id": "preview"
      }
    }, [_c('img', {
      attrs: {
        "src": item.localurl,
        "alt": item.name
      }
    })])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.size))])]), _vm._v(" "), _c('td', [_c('textarea', {
      staticClass: "textarea",
      attrs: {
        "plcaeholder": "文件描述"
      },
      on: {
        "blur": function($event) {
          _vm.fnAddSummaryToFile($event, index, _vm.homeworkupfile)
        }
      }
    })]), _vm._v(" "), _c('td', [_c('p', {
      staticClass: "btn delete cancel",
      attrs: {
        "data-index": index
      },
      on: {
        "click": function($event) {
          _vm.fnDelFile($event, index, _vm.homeworkupfile)
        }
      }
    }, [_vm._v("移除")])])])
  })) : _vm._e()])]), _vm._v(" "), _c('div', {
    ref: "homeworkcon",
    staticClass: "editor-con",
    attrs: {
      "id": "editor-homework-con"
    }
  })])])])]), _vm._v(" "), _c('fieldset', {
    staticClass: "layui-elem-field"
  }, [_c('legend', [_vm._v("作业答案")]), _vm._v(" "), _c('div', {
    staticClass: "layui-field-box"
  }, [_c('div', {
    ref: "answerwrap",
    staticClass: "wrap"
  }, [_c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("答案附件")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-block",
    staticStyle: {
      "width": "80%"
    }
  }, [_c('div', {
    staticClass: "editor-file clearfix",
    attrs: {
      "id": "editor-answer-file"
    }
  }, [_c('div', {
    staticClass: "file-btn"
  }, [_c('input', {
    attrs: {
      "type": "file",
      "multiple": "",
      "name": "files-answer"
    },
    on: {
      "change": function($event) {
        _vm.fnListenerUpFile($event, _vm.answerupfile, 'answerupfile')
      }
    }
  }), _vm._v(" "), _vm._m(2)]), _vm._v(" "), _c('div', {
    staticClass: "file-list"
  }, [(_vm.answerupfile.listdata.length > 0) ? _c('table', {
    staticClass: "table"
  }, _vm._l((_vm.answerupfile.listdata), function(item, index) {
    return _c('tr', [_c('td', [_c('div', {
      attrs: {
        "id": "preview"
      }
    }, [_c('img', {
      attrs: {
        "src": item.localurl,
        "alt": item.name
      }
    })])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.size))])]), _vm._v(" "), _c('td', [_c('textarea', {
      staticClass: "textarea",
      attrs: {
        "plcaeholder": "文件描述"
      },
      on: {
        "blur": function($event) {
          _vm.fnAddSummaryToFile($event, index, _vm.answerupfile)
        }
      }
    })]), _vm._v(" "), _c('td', [_c('p', {
      staticClass: "btn delete cancel",
      attrs: {
        "data-index": index
      },
      on: {
        "click": function($event) {
          _vm.fnDelFile($event, index, _vm.answerupfile)
        }
      }
    }, [_vm._v("移除")])])])
  })) : _vm._e()])])])]), _vm._v(" "), _vm._l((_vm.answernum), function(item) {
    return _c('div', {
      staticClass: "item"
    }, [_c('div', {
      staticClass: "layui-form-item"
    }, [_c('label', {
      staticClass: "layui-form-label"
    }, [_vm._v("答案备注")]), _vm._v(" "), _c('div', {
      staticClass: "layui-input-block"
    }, [_c('input', {
      ref: ['attention' + item],
      refInFor: true,
      staticClass: "layui-input",
      attrs: {
        "type": "text",
        "autocomplete": "off",
        "placeholder": "作业答案特别说明"
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "layui-form-item layui-form-text"
    }, [_c('label', {
      staticClass: "layui-form-label"
    }, [_vm._v("作业答案")]), _vm._v(" "), _c('div', {
      staticClass: "editor",
      attrs: {
        "id": ['editor-answer' + item]
      }
    }, [_c('div', {
      staticClass: "editor-bar",
      attrs: {
        "id": ['editor-answer-bar' + item]
      }
    }), _vm._v(" "), _c('div', {
      ref: ['answercon' + item],
      refInFor: true,
      staticClass: "editor-con",
      attrs: {
        "id": ['editor-answer-con' + item]
      }
    })])])])
  })], 2), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('div', {
    staticClass: "layui-input-block"
  }, [_c('button', {
    staticClass: "layui-btn layui-btn-primary",
    on: {
      "click": function($event) {
        _vm.fnAddAnswer()
      }
    }
  }, [_vm._v("添加答案")]), _vm._v(" "), (_vm.answernum > 1) ? _c('button', {
    staticClass: "layui-btn layui-btn-primary",
    on: {
      "click": function($event) {
        _vm.fnRemoveAnswer()
      }
    }
  }, [_vm._v("移除答案")]) : _vm._e()])])])]), _vm._v(" "), _c('fieldset', {
    staticClass: "layui-elem-field"
  }, [_c('legend', [_vm._v("添加作业")]), _vm._v(" "), _c('div', {
    staticClass: "layui-field-box"
  }, [_c('div', {
    staticClass: "layui-form-item"
  }, [_c('div', {
    staticClass: "layui-input-block"
  }, [_c('button', {
    staticClass: "layui-btn",
    attrs: {
      "lay-submit": "",
      "lay-filter": "submit"
    }
  }, [_vm._v("立即提交")]), _vm._v(" "), _c('button', {
    staticClass: "layui-btn",
    attrs: {
      "lay-filter": "back"
    },
    on: {
      "click": function($event) {
        _vm.fnBack()
      }
    }
  }, [_vm._v("返回")]), _vm._v(" "), _c('button', {
    staticClass: "layui-btn layui-btn-primary"
  }, [_vm._v("重置")])])])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("课程作业管理")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('p', {
    staticClass: "mark"
  }, [_c('i'), _vm._v("添加附件")])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('p', {
    staticClass: "mark"
  }, [_c('i'), _vm._v("添加附件")])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-62a101b6", module.exports)
  }
}

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(119)

var Component = __webpack_require__(4)(
  /* script */
  __webpack_require__(121),
  /* template */
  __webpack_require__(122),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\wampserver\\wamp\\www\\vue\\library-vue\\src\\components\\libreadtask.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] libreadtask.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-148e428a", Component.options)
  } else {
    hotAPI.reload("data-v-148e428a", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(120);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(3)("5bab98d8", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-148e428a!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libreadtask.vue", function() {
     var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-148e428a!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./libreadtask.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(2)();
// imports


// module
exports.push([module.i, "\n.layui-form{\n    margin: 20px auto;\n}\n.layui-field-box{\n    padding: 10px 0;\n}\n", ""]);

// exports


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        var thisVue = this;
        return {
            course: {
                id: '1231231',
                name: '课程名'
            },
            task: {
                courseid: '1231231',
                coursename: '课程全名',
                sectionid: '章或节id',
                sectionname: '章或节名',
                homework: {
                    id: '123123',
                    number: '作业序号',
                    name: '作业名称',
                    explain: '作业描述',
                    type: '作业类型',
                    idnumber: '作业编号',
                    author: 'admin',
                    createtime: '2017-06-30',
                    modifiedtime: '修改时间',
                    files: [{
                        id: '1231231',
                        name: '文件名',
                        summary: '文件描述',
                        type: '文件类型',
                        attachments: '地址id'
                    }, {
                        id: '1231231',
                        name: '文件名',
                        summary: '文件描述',
                        type: '文件类型',
                        attachments: '地址id'
                    }]
                },
                answer: {
                    answer: [{
                        id: '答案1id',
                        answer: '答案1内容',
                        attention: '答案1特别说明'
                    }, {
                        id: '答案2id',
                        answer: '答案2内容',
                        attention: '答案2特别说明'
                    }],
                    files: [{
                        id: '答案文件id',
                        name: '答案文件名',
                        summary: '答案文件描述',
                        type: '答案文件类型',
                        attachments: '答案地址id'
                    }, {
                        id: '答案文件id',
                        name: '答案文件名',
                        summary: '答案文件描述',
                        type: '答案文件类型',
                        attachments: '答案地址id'
                    }]
                }
            },
            homeworkupfile: {
                listdata: new Array(), // 列表循环显示的数据
                files: new Array(), // 文件列表
                msglist: new Array() // 文件描述列表
            }, // 保存上传的文件
            answerupfile: {
                listdata: new Array(), // 列表循环显示的数据
                files: new Array(), // 文件列表
                msglist: new Array() // 文件描述列表
            },
            delfile: { // 删除的文件id
                homework: [],
                answer: []
            },
            delanswer: [], // 删除答案
            answernum: 0 // 新增答案的个数
        };
    },
    activated: function activated() {
        var thisVue = this;
        layui.use('form', function () {
            var form = layui.form;
            form.on('submit(submit)', function (data) {
                console.log(data);
                thisVue.fnSubmit();
                return false;
            });
            form.render();
        });
    },
    mounted: function mounted() {
        layui.use('form', function () {
            var form = layui.form;
            form.render();
        });
        this.fnGetEdit("#editor-homework-bar", "#editor-homework-con", this.task.homework.explain);
        var answer = this.task.answer.answer;
        for (var i = 0; i < answer.length; i++) {
            this.fnGetEdit("#editor-answer-bar" + (i + 1), "#editor-answer-con" + (i + 1), answer[i].answer);
        }
    },
    computed: {},
    filters: {},
    methods: {
        fnStartEdit: function fnStartEdit() {
            // 查看作业状态下启用编辑
            this.$route.query.tp = 'edit';
        },
        fnBack: function fnBack() {
            this.$router.go(-1);
        },
        fnGetEdit: function fnGetEdit(bar, con, html) {
            var Editor = window.wangEditor;
            var editor = new Editor(bar, con);
            // 通过 url 参数配置 debug 模式。url 中带有 wangeditor_debug_mode=1 才会开启 debug 模式
            editor.customConfig.debug = location.href.indexOf('wangeditor_debug_mode=1') > 0;
            editor.customConfig.uploadImgShowBase64 = true;
            editor.customConfig.zIndex = 100;
            editor.create();
            var html = html || '';
            editor.txt.html(html);
        },
        fnListenerUpFile: function fnListenerUpFile(event, upfile, sign) {
            // 监听文件上传之添加文件
            var thisVue = this;
            var filelist = event.target.files;
            var filtered = window.utiltool.dealFileFilter({
                filtes: filelist,
                sign: sign,
                msglist: upfile.msglist
            });
            for (var i = 0; i < filtered.length; i++) {
                upfile.files.push(filtered[i].file);
                upfile.listdata.push({
                    localurl: window.utiltool.funGetUrlByType(filtered[i].file, filtered[i].type),
                    name: filtered[i].file.name,
                    size: filtered[i].formatFileSize
                });
            }
        },
        fnDelFile: function fnDelFile(event, index, upfile) {
            // 移除添加的文件
            console.log(event, index);
            upfile.listdata.removeByValue(upfile.listdata[index]);
            upfile.files.removeByValue(upfile.files[index]);
            upfile.msglist.removeByValue(upfile.msglist[index]);
        },
        fnDelUpFile: function fnDelUpFile(file, type) {
            // 删除已经上传的文件
            var thisVue = this;
            if (type === 'homework') {
                thisVue.delfile.homework.push(file.id);
                thisVue.task.homework.files.removeByValue(file);
            } else {
                thisVue.delfile.answer.push(file.id);
                thisVue.task.answer.files.removeByValue(file);
            }
            // 删除已经上传的文件
            var thisVue = this;
            if (type === 'homework') {
                thisVue.delfile.homework.push(file.id);
                thisVue.task.homework.files.removeByValue(file);
            } else {
                thisVue.delfile.answer.push(file.id);
                thisVue.task.answer.files.removeByValue(file);
            }
        },
        fnAddSummaryToFile: function fnAddSummaryToFile(event, index, upfile) {
            // 给上传的文件添加描述
            upfile.msglist[index].summary = $(event.path[0]).val();
        },
        fnSubmit: function fnSubmit() {
            // 提交添加的作业
            var thisVue = this;
            console.log('thisVue.$refs', thisVue.$refs);
            var homeworkcon = thisVue.$refs.homeworkcon.children[0].innerHTML;
            // 作业内容不能为空
            if (new RegExp(regexEnum.notempty).test(thisVue.$refs.homeworkcon.children[0].innerText)) {
                var data = {
                    courseid: thisVue.course.id,
                    sectionid: thisVue.task.sectionid,
                    homework: {
                        name: thisVue.$refs.name.value,
                        type: thisVue.task.homework.type,
                        explain: thisVue.$refs.homeworkcon.children[0].innerHTML,
                        id: thisVue.task.homework.id,
                        files: function () {
                            var arr = [];
                            var homeworkfiles = thisVue.task.homework.files;
                            for (var i = 0; i < homeworkfiles.length; i++) {
                                var hfilesindex = 'hfiles' + i;
                                arr.push({
                                    id: homeworkfiles[i].id,
                                    summary: thisVue.$refs[hfilesindex][0].value
                                });
                            }
                            return arr;
                        }(),
                        delfile: thisVue.delfile.homework
                    },
                    answer: {
                        answer: function () {
                            var arr = new Array();
                            var answerlen = thisVue.task.answer.answer.length;
                            for (var i = 0; i < answerlen; i++) {
                                var answercon = 'answercon' + (i + 1);
                                var attention = 'attention' + (i + 1);
                                arr.push({
                                    id: thisVue.task.answer.answer[i].id,
                                    answer: thisVue.$refs[answercon][0].children[0].innerHTML,
                                    attention: thisVue.$refs[attention][0].value
                                });
                            }
                            return arr;
                        }(),
                        delanswer: thisVue.delanswer,
                        addanswer: function () {
                            var arr = new Array();
                            var answerlen = thisVue.task.answer.answer.length;
                            for (var i = 0; i < thisVue.answernum; i++) {
                                var answercon = 'answercon' + (i + 1 + answerlen);
                                var attention = 'attention' + (i + 1 + answerlen);
                                arr.push({
                                    answer: thisVue.$refs[answercon][0].children[0].innerHTML,
                                    attention: thisVue.$refs[attention][0].value
                                });
                            }
                            return arr;
                        }(),
                        files: function () {
                            var arr = [];
                            var answerfiles = thisVue.task.answer.files;
                            for (var i = 0; i < answerfiles.length; i++) {
                                var afilesindex = 'afiles' + i;
                                arr.push({
                                    id: answerfiles[i].id,
                                    summary: thisVue.$refs[afilesindex][0].value
                                });
                            }
                            return arr;
                        }(),
                        delfile: thisVue.delfile.answer
                    },
                    files: thisVue.homeworkupfile.files.concat(thisVue.answerupfile.files),
                    msglist: thisVue.homeworkupfile.msglist.concat(thisVue.answerupfile.msglist)
                };
                console.log(data);
            } else {
                layer.msg('作业内容不能为空', { icon: 5, time: 2000 }, function () {
                    // thisVue.$refs.homeworkcon.children[0].onfocus();
                });
            }
        },
        fnAddAnswer: function fnAddAnswer() {
            // 继续添加作业答案
            var thisVue = this;
            thisVue.answernum++;
            var index = thisVue.task.answer.answer.length;
            this.$nextTick(function () {
                thisVue.fnGetEdit("#editor-answer-bar" + (thisVue.answernum + index), "#editor-answer-con" + (thisVue.answernum + index));
            });
        },
        fnRemoveAnswer: function fnRemoveAnswer() {
            // 移去作业答案答案
            this.answernum--;
            if (this.answernum <= 0) {
                this.answernum = 0;
            }
        },
        fnRemoveUpAnswer: function fnRemoveUpAnswer(item) {
            // 删除已经存在的答案
            this.delanswer.push(item.id);
            this.task.answer.answer.removeByValue(item);
        }

    },
    watch: {
        answernum: function answernum() {
            var thisVue = this;
        }
    }
};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    attrs: {
      "id": "libtask"
    }
  }, [_c('div', {
    staticClass: "classify clearfix"
  }, [_vm._m(0), _vm._v(" "), (_vm.task) ? _c('div', {
    staticClass: "fr"
  }, [_c('span', [_vm._v(_vm._s(_vm.task.coursename))])]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "layui-form"
  }, [_c('fieldset', {
    staticClass: "layui-elem-field"
  }, [_c('legend', [_vm._v("作业题目")]), _vm._v(" "), _c('div', {
    staticClass: "layui-field-box"
  }, [_c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业章节")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.sectionname
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业类型")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.homework.type
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业序号")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.homework.number
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业编号")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.homework.idnumber
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业编者")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.homework.author
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("创建时间")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.homework.createtime
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("修改时间")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-inline"
  }, [_c('input', {
    staticClass: "layui-input",
    attrs: {
      "type": "text",
      "name": "name",
      "autocomplete": "off",
      "disabled": ""
    },
    domProps: {
      "value": _vm.task.homework.modifiedtime
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业名称")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-block"
  }, [_c('input', {
    ref: "name",
    staticClass: "layui-input",
    attrs: {
      "disabled": _vm.$route.query.tp === 'show',
      "type": "text",
      "name": "name",
      "lay-verify": "required",
      "autocomplete": "off",
      "placeholder": "请输入名称"
    },
    domProps: {
      "value": _vm.task.homework.name
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "layui-form-item layui-form-text"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("作业内容")]), _vm._v(" "), _c('div', {
    staticClass: "editor",
    attrs: {
      "id": "editor-homework"
    }
  }, [_c('div', {
    staticClass: "editor-bar",
    attrs: {
      "id": "editor-homework-bar"
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "editor-file clearfix",
    attrs: {
      "id": "editor-homework-file"
    }
  }, [(_vm.$route.query.tp === 'edit') ? _c('div', {
    staticClass: "file-btn"
  }, [_c('input', {
    attrs: {
      "type": "file",
      "multiple": "",
      "name": "files-homework"
    },
    on: {
      "change": function($event) {
        _vm.fnListenerUpFile($event, _vm.homeworkupfile, 'homeworkupfile')
      }
    }
  }), _vm._v(" "), _vm._m(1)]) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "file-list"
  }, [(_vm.task.homework.files.length > 0) ? _c('table', {
    staticClass: "table"
  }, [_vm._l((_vm.task.homework.files), function(item, index) {
    return _c('tr', [_c('td', [_c('div', {
      attrs: {
        "id": "preview"
      }
    }, [_c('img', {
      attrs: {
        "src": item.attachments,
        "alt": item.name
      }
    })])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.type))])]), _vm._v(" "), _c('td', [_c('textarea', {
      ref: ['hfiles' + index],
      refInFor: true,
      staticClass: "textarea",
      attrs: {
        "disabled": _vm.$route.query.tp === 'show',
        "plcaeholder": "文件描述"
      }
    }, [_vm._v(_vm._s(item.summary))])]), _vm._v(" "), _c('td', [(_vm.$route.query.tp === 'edit') ? _c('p', {
      staticClass: "btn delete cancel",
      on: {
        "click": function($event) {
          _vm.fnDelUpFile(item, 'homework')
        }
      }
    }, [_vm._v("移除")]) : _vm._e(), _vm._v(" "), (_vm.$route.query.tp === 'show') ? _c('p', {
      staticClass: "btn download cancel"
    }, [_vm._v("下载")]) : _vm._e()])])
  }), _vm._v(" "), _vm._l((_vm.homeworkupfile.listdata), function(item, index) {
    return _c('tr', [_c('td', [_c('div', {
      attrs: {
        "id": "preview"
      }
    }, [_c('img', {
      attrs: {
        "src": item.localurl,
        "alt": item.name
      }
    })])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.size))])]), _vm._v(" "), _c('td', [_c('textarea', {
      staticClass: "textarea",
      attrs: {
        "plcaeholder": "文件描述"
      },
      on: {
        "blur": function($event) {
          _vm.fnAddSummaryToFile($event, index, _vm.homeworkupfile)
        }
      }
    })]), _vm._v(" "), _c('td', [_c('p', {
      staticClass: "btn delete cancel",
      attrs: {
        "data-index": index
      },
      on: {
        "click": function($event) {
          _vm.fnDelFile($event, index, _vm.homeworkupfile)
        }
      }
    }, [_vm._v("移除")])])])
  })], 2) : _vm._e()])]), _vm._v(" "), _c('div', {
    ref: "homeworkcon",
    staticClass: "editor-con",
    attrs: {
      "id": "editor-homework-con"
    }
  })])])])]), _vm._v(" "), _c('fieldset', {
    staticClass: "layui-elem-field"
  }, [_c('legend', [_vm._v("作业答案")]), _vm._v(" "), _c('div', {
    staticClass: "layui-field-box"
  }, [_c('div', {
    ref: "answerwrap",
    staticClass: "wrap"
  }, [_c('div', {
    staticClass: "layui-form-item"
  }, [_c('label', {
    staticClass: "layui-form-label"
  }, [_vm._v("答案附件")]), _vm._v(" "), _c('div', {
    staticClass: "layui-input-block",
    staticStyle: {
      "width": "80%"
    }
  }, [_c('div', {
    staticClass: "editor-file clearfix",
    attrs: {
      "id": "editor-answer-file"
    }
  }, [(_vm.$route.query.tp === 'edit') ? _c('div', {
    staticClass: "file-btn"
  }, [_c('input', {
    attrs: {
      "type": "file",
      "multiple": "",
      "name": "files-answer"
    },
    on: {
      "change": function($event) {
        _vm.fnListenerUpFile($event, _vm.answerupfile, 'answerupfile')
      }
    }
  }), _vm._v(" "), _vm._m(2)]) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "file-list"
  }, [(_vm.task.answer.files.length > 0) ? _c('table', {
    staticClass: "table"
  }, [_vm._l((_vm.task.answer.files), function(item, index) {
    return _c('tr', [_c('td', [_c('div', {
      attrs: {
        "id": "preview"
      }
    }, [_c('img', {
      attrs: {
        "src": item.attachments,
        "alt": item.name
      }
    })])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.type))])]), _vm._v(" "), _c('td', [_c('textarea', {
      ref: ['afiles' + index],
      refInFor: true,
      staticClass: "textarea",
      attrs: {
        "disabled": _vm.$route.query.tp === 'show',
        "plcaeholder": "文件描述"
      }
    }, [_vm._v(_vm._s(item.summary))])]), _vm._v(" "), _c('td', [(_vm.$route.query.tp === 'edit') ? _c('p', {
      staticClass: "btn delete cancel",
      on: {
        "click": function($event) {
          _vm.fnDelUpFile(item, 'answer')
        }
      }
    }, [_vm._v("移除")]) : _vm._e(), _vm._v(" "), (_vm.$route.query.tp === 'show') ? _c('p', {
      staticClass: "btn download cancel"
    }, [_vm._v("下载")]) : _vm._e()])])
  }), _vm._v(" "), _vm._l((_vm.answerupfile.listdata), function(item, index) {
    return _c('tr', [_c('td', [_c('div', {
      attrs: {
        "id": "preview"
      }
    }, [_c('img', {
      attrs: {
        "src": item.localurl,
        "alt": item.name
      }
    })])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.name))])]), _vm._v(" "), _c('td', [_c('span', [_vm._v(_vm._s(item.size))])]), _vm._v(" "), _c('td', [_c('textarea', {
      staticClass: "textarea",
      attrs: {
        "plcaeholder": "文件描述"
      },
      on: {
        "blur": function($event) {
          _vm.fnAddSummaryToFile($event, index, _vm.answerupfile)
        }
      }
    })]), _vm._v(" "), _c('td', [_c('p', {
      staticClass: "btn delete cancel",
      attrs: {
        "data-index": index
      },
      on: {
        "click": function($event) {
          _vm.fnDelFile($event, index, _vm.answerupfile)
        }
      }
    }, [_vm._v("移除")])])])
  })], 2) : _vm._e()])])])]), _vm._v(" "), _vm._l((_vm.task.answer.answer), function(item, index) {
    return _c('div', {
      staticClass: "item"
    }, [_c('div', {
      staticClass: "layui-form-item"
    }, [_c('label', {
      staticClass: "layui-form-label"
    }, [_vm._v("答案备注")]), _vm._v(" "), _c('div', {
      staticClass: "layui-input-block"
    }, [_c('input', {
      ref: ['attention' + (index + 1)],
      refInFor: true,
      staticClass: "layui-input",
      attrs: {
        "type": "text",
        "autocomplete": "off",
        "placeholder": "作业答案特别说明"
      },
      domProps: {
        "value": item.summary
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "layui-form-item layui-form-text"
    }, [_c('label', {
      staticClass: "layui-form-label"
    }, [_vm._v("作业答案")]), _vm._v(" "), _c('div', {
      staticClass: "editor",
      attrs: {
        "id": ['editor-answer' + (index + 1)]
      }
    }, [_c('div', {
      staticClass: "editor-bar",
      attrs: {
        "id": ['editor-answer-bar' + (index + 1)]
      }
    }), _vm._v(" "), _c('div', {
      ref: ['answercon' + (index + 1)],
      refInFor: true,
      staticClass: "editor-con",
      attrs: {
        "id": ['editor-answer-con' + (index + 1)]
      }
    })])]), _vm._v(" "), (_vm.$route.query.tp === 'edit') ? _c('div', {
      staticClass: "layui-form-item"
    }, [_c('div', {
      staticClass: "layui-input-block"
    }, [(_vm.task.answer.answer.length > 0) ? _c('button', {
      staticClass: "layui-btn layui-btn-primary",
      on: {
        "click": function($event) {
          _vm.fnRemoveUpAnswer(item)
        }
      }
    }, [_vm._v("删除答案")]) : _vm._e()])]) : _vm._e()])
  }), _vm._v(" "), _vm._l((_vm.answernum), function(item) {
    return _c('div', {
      staticClass: "item"
    }, [_c('div', {
      staticClass: "layui-form-item"
    }, [_c('label', {
      staticClass: "layui-form-label"
    }, [_vm._v("答案备注")]), _vm._v(" "), _c('div', {
      staticClass: "layui-input-block"
    }, [_c('input', {
      ref: ['attention' + (item + _vm.task.answer.answer.length)],
      refInFor: true,
      staticClass: "layui-input",
      attrs: {
        "type": "text",
        "autocomplete": "off",
        "placeholder": "作业答案特别说明"
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "layui-form-item layui-form-text"
    }, [_c('label', {
      staticClass: "layui-form-label"
    }, [_vm._v("作业答案")]), _vm._v(" "), _c('div', {
      staticClass: "editor",
      attrs: {
        "id": ['editor-answer' + (item + _vm.task.answer.answer.length)]
      }
    }, [_c('div', {
      staticClass: "editor-bar",
      attrs: {
        "id": ['editor-answer-bar' + (item + _vm.task.answer.answer.length)]
      }
    }), _vm._v(" "), _c('div', {
      ref: ['answercon' + (item + _vm.task.answer.answer.length)],
      refInFor: true,
      staticClass: "editor-con",
      attrs: {
        "id": ['editor-answer-con' + (item + _vm.task.answer.answer.length)]
      }
    })])])])
  })], 2), _vm._v(" "), (_vm.$route.query.tp === 'edit') ? _c('div', {
    staticClass: "layui-form-item"
  }, [_c('div', {
    staticClass: "layui-input-block"
  }, [_c('button', {
    staticClass: "layui-btn layui-btn-primary",
    on: {
      "click": function($event) {
        _vm.fnAddAnswer()
      }
    }
  }, [_vm._v("添加答案")]), _vm._v(" "), (_vm.answernum > 0) ? _c('button', {
    staticClass: "layui-btn layui-btn-primary",
    on: {
      "click": function($event) {
        _vm.fnRemoveAnswer()
      }
    }
  }, [_vm._v("移除答案")]) : _vm._e()])]) : _vm._e()])]), _vm._v(" "), _c('fieldset', {
    staticClass: "layui-elem-field"
  }, [_c('legend', [_vm._v("添加作业")]), _vm._v(" "), _c('div', {
    staticClass: "layui-field-box"
  }, [_c('div', {
    staticClass: "layui-form-item"
  }, [_c('div', {
    staticClass: "layui-input-block"
  }, [(_vm.$route.query.tp === 'edit') ? _c('button', {
    staticClass: "layui-btn",
    attrs: {
      "lay-submit": "",
      "lay-filter": "submit"
    }
  }, [_vm._v("立即提交")]) : _vm._e(), _vm._v(" "), _c('button', {
    staticClass: "layui-btn",
    attrs: {
      "lay-filter": "back"
    },
    on: {
      "click": function($event) {
        _vm.fnBack()
      }
    }
  }, [_vm._v("返回")]), _vm._v(" "), (_vm.$route.query.tp === 'edit') ? _c('button', {
    staticClass: "layui-btn layui-btn-primary"
  }, [_vm._v("重置")]) : _vm._e(), _vm._v(" "), (_vm.$route.query.tp === 'show') ? _c('router-link', {
    staticClass: "layui-btn layui-btn-primary",
    attrs: {
      "tag": "button",
      "to": {
        path: '',
        query: {
          cd: _vm.$route.query.cd,
          sd: _vm.$route.query.sd,
          td: _vm.$route.query.td,
          tp: 'edit'
        }
      }
    }
  }, [_vm._v("启用编辑")]) : _vm._e()], 1)])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('ul', {
    staticClass: "fl"
  }, [_c('li', [_c('i', {
    staticClass: "before",
    staticStyle: {
      "left": "0"
    }
  }), _vm._v(" "), _c('a', {
    staticClass: "click",
    attrs: {
      "href": "javascript:void(0);"
    }
  }, [_vm._v("课堂作业管理")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('p', {
    staticClass: "mark"
  }, [_c('i'), _vm._v("添加附件")])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('p', {
    staticClass: "mark"
  }, [_c('i'), _vm._v("添加附件")])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-148e428a", module.exports)
  }
}

/***/ })
],[69]);